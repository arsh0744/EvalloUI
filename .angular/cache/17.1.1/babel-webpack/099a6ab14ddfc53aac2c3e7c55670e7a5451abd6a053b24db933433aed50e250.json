{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { TemplateRef, booleanAttribute, Component, ChangeDetectionStrategy, Input, EventEmitter, numberAttribute, Directive, Output, NgModule } from '@angular/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject, fromEvent } from 'rxjs';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { takeUntil, first } from 'rxjs/operators';\nfunction MdbPopoverComponent_h3_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h3\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.title, \" \");\n  }\n}\nfunction MdbPopoverComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelementContainer(1, 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.content)(\"ngTemplateOutletContext\", ctx_r1.context);\n  }\n}\nfunction MdbPopoverComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.content, \" \");\n  }\n}\nlet MdbPopoverComponent = /*#__PURE__*/(() => {\n  class MdbPopoverComponent {\n    _cdRef;\n    animation;\n    content;\n    context;\n    title;\n    get isContentTemplate() {\n      return this.content instanceof TemplateRef;\n    }\n    _hidden = new Subject();\n    animationState = 'hidden';\n    constructor(_cdRef) {\n      this._cdRef = _cdRef;\n    }\n    markForCheck() {\n      this._cdRef.markForCheck();\n    }\n    onAnimationEnd(event) {\n      if (event.toState === 'hidden') {\n        this._hidden.next();\n      }\n    }\n    static ɵfac = function MdbPopoverComponent_Factory(t) {\n      return new (t || MdbPopoverComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MdbPopoverComponent,\n      selectors: [[\"mdb-popover\"]],\n      inputs: {\n        animation: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"animation\", \"animation\", booleanAttribute],\n        content: \"content\",\n        context: \"context\",\n        title: \"title\"\n      },\n      features: [i0.ɵɵInputTransformsFeature],\n      decls: 4,\n      vars: 5,\n      consts: [[1, \"popover\"], [\"class\", \"popover-header\", 4, \"ngIf\"], [\"class\", \"popover-body\", 4, \"ngIf\"], [1, \"popover-header\"], [1, \"popover-body\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n      template: function MdbPopoverComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"@fade.done\", function MdbPopoverComponent_Template_div_animation_fade_done_0_listener($event) {\n            return ctx.onAnimationEnd($event);\n          });\n          i0.ɵɵtemplate(1, MdbPopoverComponent_h3_1_Template, 2, 1, \"h3\", 1)(2, MdbPopoverComponent_div_2_Template, 2, 2, \"div\", 2)(3, MdbPopoverComponent_div_3_Template, 2, 1, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"@fade\", ctx.animationState)(\"@.disabled\", !ctx.animation);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.title);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isContentTemplate);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.isContentTemplate);\n        }\n      },\n      dependencies: [i1.NgIf, i1.NgTemplateOutlet],\n      encapsulation: 2,\n      data: {\n        animation: [trigger('fade', [state('visible', style({\n          opacity: 1\n        })), state('hidden', style({\n          opacity: 0\n        })), transition('visible <=> hidden', animate('150ms linear')), transition(':enter', animate('150ms linear'))])]\n      },\n      changeDetection: 0\n    });\n  }\n  return MdbPopoverComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nlet MdbPopoverDirective = /*#__PURE__*/(() => {\n  class MdbPopoverDirective {\n    _overlay;\n    _overlayPositionBuilder;\n    _elementRef;\n    animation = true;\n    delayHide = 0;\n    delayShow = 0;\n    mdbPopover = '';\n    mdbPopoverData;\n    mdbPopoverTitle = '';\n    offset = 4;\n    placement = 'top';\n    popoverDisabled = false;\n    trigger = 'click';\n    popoverShow = new EventEmitter();\n    popoverShown = new EventEmitter();\n    popoverHide = new EventEmitter();\n    popoverHidden = new EventEmitter();\n    _overlayRef;\n    _tooltipRef;\n    _open = false;\n    _showTimeout = 0;\n    _hideTimeout = 0;\n    _destroy$ = new Subject();\n    constructor(_overlay, _overlayPositionBuilder, _elementRef) {\n      this._overlay = _overlay;\n      this._overlayPositionBuilder = _overlayPositionBuilder;\n      this._elementRef = _elementRef;\n    }\n    ngOnInit() {\n      if (this.popoverDisabled || this.mdbPopover === '' && this.mdbPopoverTitle === '') {\n        return;\n      }\n      this._bindTriggerEvents();\n    }\n    ngOnDestroy() {\n      if (this._open) {\n        this.hide();\n      }\n      this._destroy$.next();\n      this._destroy$.complete();\n    }\n    _bindTriggerEvents() {\n      const triggers = this.trigger.split(' ');\n      triggers.forEach(trigger => {\n        if (trigger === 'click') {\n          fromEvent(this._elementRef.nativeElement, trigger).pipe(takeUntil(this._destroy$)).subscribe(() => this.toggle());\n        } else if (trigger !== 'manual') {\n          const evIn = trigger === 'hover' ? 'mouseenter' : 'focusin';\n          const evOut = trigger === 'hover' ? 'mouseleave' : 'focusout';\n          fromEvent(this._elementRef.nativeElement, evIn).pipe(takeUntil(this._destroy$)).subscribe(() => this.show());\n          fromEvent(this._elementRef.nativeElement, evOut).pipe(takeUntil(this._destroy$)).subscribe(() => this.hide());\n        }\n      });\n    }\n    _createOverlayConfig() {\n      const positionStrategy = this._overlayPositionBuilder.flexibleConnectedTo(this._elementRef).withPositions(this._getPosition()).withPush(false);\n      const overlayConfig = new OverlayConfig({\n        hasBackdrop: false,\n        scrollStrategy: this._overlay.scrollStrategies.reposition(),\n        positionStrategy\n      });\n      return overlayConfig;\n    }\n    _createOverlay() {\n      this._overlayRef = this._overlay.create(this._createOverlayConfig());\n    }\n    _getPosition() {\n      let position;\n      const positionTop = {\n        originX: 'center',\n        originY: 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetY: -this.offset\n      };\n      const positionBottom = {\n        originX: 'center',\n        originY: 'bottom',\n        overlayX: 'center',\n        overlayY: 'top',\n        offsetY: this.offset\n      };\n      const positionRight = {\n        originX: 'end',\n        originY: 'center',\n        overlayX: 'start',\n        overlayY: 'center',\n        offsetX: this.offset\n      };\n      const positionLeft = {\n        originX: 'start',\n        originY: 'center',\n        overlayX: 'end',\n        overlayY: 'center',\n        offsetX: -this.offset\n      };\n      switch (this.placement) {\n        case 'top':\n          position = [positionTop, positionBottom];\n          break;\n        case 'bottom':\n          position = [positionBottom, positionTop];\n          break;\n        case 'left':\n          position = [positionLeft, positionRight, positionTop, positionBottom];\n          break;\n        case 'right':\n          position = [positionRight, positionLeft, positionTop, positionBottom];\n          break;\n        default:\n          break;\n      }\n      return position;\n    }\n    show() {\n      if (this._hideTimeout) {\n        this._overlayRef.detach();\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n      }\n      this._createOverlay();\n      if (this._hideTimeout) {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n      }\n      this._showTimeout = setTimeout(() => {\n        const tooltipPortal = new ComponentPortal(MdbPopoverComponent);\n        this.popoverShow.emit(this);\n        this._open = true;\n        this._tooltipRef = this._overlayRef.attach(tooltipPortal);\n        this._tooltipRef.instance.content = this.mdbPopover;\n        this._tooltipRef.instance.title = this.mdbPopoverTitle;\n        this._tooltipRef.instance.animation = this.animation;\n        this._tooltipRef.instance.context = this.mdbPopoverData;\n        this._tooltipRef.instance.animationState = 'visible';\n        this._tooltipRef.instance.markForCheck();\n        this.popoverShown.emit(this);\n      }, this.delayShow);\n    }\n    hide() {\n      if (this._showTimeout) {\n        clearTimeout(this._showTimeout);\n        this._showTimeout = null;\n      } else {\n        return;\n      }\n      this._hideTimeout = setTimeout(() => {\n        this.popoverHide.emit(this);\n        if (!this._tooltipRef) {\n          this._overlayRef.detach();\n          this._open = false;\n          this.popoverHidden.emit(this);\n        } else {\n          this._tooltipRef.instance._hidden.pipe(first()).subscribe(() => {\n            this._overlayRef.detach();\n            this._open = false;\n            this.popoverHidden.emit(this);\n          });\n          this._tooltipRef.instance.animationState = 'hidden';\n          this._tooltipRef.instance.markForCheck();\n        }\n      }, this.delayHide);\n    }\n    toggle() {\n      if (this._open) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n    static ɵfac = function MdbPopoverDirective_Factory(t) {\n      return new (t || MdbPopoverDirective)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i1$1.OverlayPositionBuilder), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MdbPopoverDirective,\n      selectors: [[\"\", \"mdbPopover\", \"\"]],\n      inputs: {\n        animation: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"animation\", \"animation\", booleanAttribute],\n        delayHide: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"delayHide\", \"delayHide\", numberAttribute],\n        delayShow: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"delayShow\", \"delayShow\", numberAttribute],\n        mdbPopover: \"mdbPopover\",\n        mdbPopoverData: \"mdbPopoverData\",\n        mdbPopoverTitle: \"mdbPopoverTitle\",\n        offset: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"offset\", \"offset\", numberAttribute],\n        placement: \"placement\",\n        popoverDisabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"popoverDisabled\", \"popoverDisabled\", booleanAttribute],\n        trigger: \"trigger\"\n      },\n      outputs: {\n        popoverShow: \"popoverShow\",\n        popoverShown: \"popoverShown\",\n        popoverHide: \"popoverHide\",\n        popoverHidden: \"popoverHidden\"\n      },\n      exportAs: [\"mdbPopover\"],\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n  return MdbPopoverDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbPopoverModule = /*#__PURE__*/(() => {\n  class MdbPopoverModule {\n    static ɵfac = function MdbPopoverModule_Factory(t) {\n      return new (t || MdbPopoverModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MdbPopoverModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, OverlayModule]\n    });\n  }\n  return MdbPopoverModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbPopoverComponent, MdbPopoverDirective, MdbPopoverModule };\n//# sourceMappingURL=mdb-angular-ui-kit-popover.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}