{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, Component, HostBinding, NgModule } from '@angular/core';\nimport { Subject, fromEvent } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"*\"];\nlet MdbValidateDirective = /*#__PURE__*/(() => {\n  class MdbValidateDirective {\n    renderer;\n    _elementRef;\n    _validate = true;\n    _validateSuccess = true;\n    _validateError = true;\n    get mdbValidate() {\n      return this._mdbValidate;\n    }\n    set mdbValidate(value) {\n      this._mdbValidate = coerceBooleanProperty(value);\n    }\n    _mdbValidate;\n    get validate() {\n      return this._validate;\n    }\n    set validate(value) {\n      this._validate = coerceBooleanProperty(value);\n      this.updateErrorClass();\n      this.updateSuccessClass();\n    }\n    get validateSuccess() {\n      return this._validateSuccess;\n    }\n    set validateSuccess(value) {\n      this._validateSuccess = coerceBooleanProperty(value);\n      this.updateSuccessClass();\n    }\n    get validateError() {\n      return this._validateError;\n    }\n    set validateError(value) {\n      this._validateError = coerceBooleanProperty(value);\n      this.updateErrorClass();\n      this.updateSuccessClass();\n    }\n    constructor(renderer, _elementRef) {\n      this.renderer = renderer;\n      this._elementRef = _elementRef;\n    }\n    updateSuccessClass() {\n      if (this.validate && this.validateSuccess) {\n        this.renderer.addClass(this._elementRef.nativeElement, 'validate-success');\n      } else {\n        this.renderer.removeClass(this._elementRef.nativeElement, 'validate-success');\n      }\n    }\n    updateErrorClass() {\n      if (this.validate && this.validateError) {\n        this.renderer.addClass(this._elementRef.nativeElement, 'validate-error');\n      } else {\n        this.renderer.removeClass(this._elementRef.nativeElement, 'validate-error');\n      }\n    }\n    ngOnInit() {\n      this.updateSuccessClass();\n      this.updateErrorClass();\n    }\n    static ngAcceptInputType_mdbValidate;\n    static ngAcceptInputType_validate;\n    static ngAcceptInputType_validateSuccess;\n    static ngAcceptInputType_validateError;\n    static ɵfac = function MdbValidateDirective_Factory(t) {\n      return new (t || MdbValidateDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MdbValidateDirective,\n      selectors: [[\"\", \"mdbValidate\", \"\"]],\n      inputs: {\n        mdbValidate: \"mdbValidate\",\n        validate: \"validate\",\n        validateSuccess: \"validateSuccess\",\n        validateError: \"validateError\"\n      }\n    });\n  }\n  return MdbValidateDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet defaultIdNumber$1 = 0;\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nlet MdbErrorDirective = /*#__PURE__*/(() => {\n  class MdbErrorDirective {\n    _elementRef;\n    renderer;\n    id = `mdb-error-${defaultIdNumber$1++}`;\n    errorMsg = true;\n    messageId = this.id;\n    _destroy$ = new Subject();\n    constructor(_elementRef, renderer) {\n      this._elementRef = _elementRef;\n      this.renderer = renderer;\n    }\n    _getClosestEl(el, selector) {\n      for (; el && el !== document; el = el.parentNode) {\n        if (el.matches && el.matches(selector)) {\n          return el;\n        }\n      }\n      return null;\n    }\n    ngOnInit() {\n      const textarea = this._getClosestEl(this._elementRef.nativeElement, 'textarea');\n      if (textarea) {\n        let height = textarea.offsetHeight + 4 + 'px';\n        this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        fromEvent(textarea, 'keyup').pipe(takeUntil(this._destroy$)).subscribe(() => {\n          height = textarea.offsetHeight + 4 + 'px';\n          this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        });\n      }\n    }\n    ngOnDestroy() {\n      this._destroy$.next();\n      this._destroy$.complete();\n    }\n    static ɵfac = function MdbErrorDirective_Factory(t) {\n      return new (t || MdbErrorDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MdbErrorDirective,\n      selectors: [[\"mdb-error\"]],\n      hostVars: 3,\n      hostBindings: function MdbErrorDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.messageId);\n          i0.ɵɵclassProp(\"error-message\", ctx.errorMsg);\n        }\n      },\n      inputs: {\n        id: \"id\"\n      },\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function MdbErrorDirective_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return MdbErrorDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet defaultIdNumber = 0;\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nlet MdbSuccessDirective = /*#__PURE__*/(() => {\n  class MdbSuccessDirective {\n    _elementRef;\n    renderer;\n    id = `mdb-success-${defaultIdNumber++}`;\n    successMsg = true;\n    messageId = this.id;\n    _destroy$ = new Subject();\n    constructor(_elementRef, renderer) {\n      this._elementRef = _elementRef;\n      this.renderer = renderer;\n    }\n    _getClosestEl(el, selector) {\n      for (; el && el !== document; el = el.parentNode) {\n        if (el.matches && el.matches(selector)) {\n          return el;\n        }\n      }\n      return null;\n    }\n    ngOnInit() {\n      const textarea = this._getClosestEl(this._elementRef.nativeElement, 'textarea');\n      if (textarea) {\n        let height = textarea.offsetHeight + 4 + 'px';\n        this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        fromEvent(textarea, 'keyup').pipe(takeUntil(this._destroy$)).subscribe(() => {\n          height = textarea.offsetHeight + 4 + 'px';\n          this.renderer.setStyle(this._elementRef.nativeElement, 'top', height);\n        });\n      }\n    }\n    ngOnDestroy() {\n      this._destroy$.next();\n      this._destroy$.complete();\n    }\n    static ɵfac = function MdbSuccessDirective_Factory(t) {\n      return new (t || MdbSuccessDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MdbSuccessDirective,\n      selectors: [[\"mdb-success\"]],\n      hostVars: 3,\n      hostBindings: function MdbSuccessDirective_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.messageId);\n          i0.ɵɵclassProp(\"success-message\", ctx.successMsg);\n        }\n      },\n      inputs: {\n        id: \"id\"\n      },\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function MdbSuccessDirective_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵprojection(0);\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return MdbSuccessDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbValidationModule = /*#__PURE__*/(() => {\n  class MdbValidationModule {\n    static ɵfac = function MdbValidationModule_Factory(t) {\n      return new (t || MdbValidationModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MdbValidationModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return MdbValidationModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbErrorDirective, MdbSuccessDirective, MdbValidateDirective, MdbValidationModule };\n//# sourceMappingURL=mdb-angular-ui-kit-validation.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}