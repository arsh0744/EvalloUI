{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"input\"];\nconst _c1 = [\"thumb\"];\nconst _c2 = [\"thumbValue\"];\nconst _c3 = a0 => ({\n  \"thumb-active\": a0\n});\nconst RANGE_VALUE_ACCESOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbRangeComponent),\n  multi: true\n};\nlet MdbRangeComponent = /*#__PURE__*/(() => {\n  class MdbRangeComponent {\n    _cdRef;\n    input;\n    thumb;\n    thumbValue;\n    id;\n    required;\n    name;\n    value;\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    _disabled;\n    label;\n    min = 0;\n    max = 100;\n    step;\n    get default() {\n      return this._default;\n    }\n    set default(value) {\n      this._default = value;\n    }\n    _default;\n    defaultRangeCounterClass;\n    rangeValueChange = new EventEmitter();\n    visibility = false;\n    thumbStyle;\n    onchange(event) {\n      this.onChange(event.target.value);\n    }\n    onInput() {\n      this.rangeValueChange.emit({\n        value: this.value\n      });\n      this.focusRangeInput();\n    }\n    constructor(_cdRef) {\n      this._cdRef = _cdRef;\n    }\n    ngAfterViewInit() {\n      this.thumbPositionUpdate();\n    }\n    focusRangeInput() {\n      this.input.nativeElement.focus();\n      this.visibility = true;\n    }\n    blurRangeInput() {\n      this.input.nativeElement.blur();\n      this.visibility = false;\n    }\n    thumbPositionUpdate() {\n      const rangeInput = this.input.nativeElement;\n      const inputValue = rangeInput.value;\n      const minValue = rangeInput.min ? rangeInput.min : 0;\n      const maxValue = rangeInput.max ? rangeInput.max : 100;\n      const newValue = Number((inputValue - minValue) * 100 / (maxValue - minValue));\n      this.value = inputValue;\n      this.thumbStyle = {\n        left: `calc(${newValue}% + (${8 - newValue * 0.15}px))`\n      };\n    }\n    // Control Value Accessor Methods\n    onChange = _ => {};\n    onTouched = () => {};\n    writeValue(value) {\n      this.value = value;\n      this._cdRef.markForCheck();\n      setTimeout(() => {\n        this.thumbPositionUpdate();\n      }, 0);\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    static ngAcceptInputType_default;\n    static ngAcceptInputType_disabled;\n    static ɵfac = function MdbRangeComponent_Factory(t) {\n      return new (t || MdbRangeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MdbRangeComponent,\n      selectors: [[\"mdb-range\"]],\n      viewQuery: function MdbRangeComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.thumb = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.thumbValue = _t.first);\n        }\n      },\n      hostBindings: function MdbRangeComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"change\", function MdbRangeComponent_change_HostBindingHandler($event) {\n            return ctx.onchange($event);\n          })(\"input\", function MdbRangeComponent_input_HostBindingHandler() {\n            return ctx.onInput();\n          });\n        }\n      },\n      inputs: {\n        id: \"id\",\n        required: \"required\",\n        name: \"name\",\n        value: \"value\",\n        disabled: \"disabled\",\n        label: \"label\",\n        min: \"min\",\n        max: \"max\",\n        step: \"step\",\n        default: \"default\",\n        defaultRangeCounterClass: \"defaultRangeCounterClass\"\n      },\n      outputs: {\n        rangeValueChange: \"rangeValueChange\"\n      },\n      features: [i0.ɵɵProvidersFeature([RANGE_VALUE_ACCESOR])],\n      decls: 10,\n      vars: 14,\n      consts: [[\"for\", \"id\", 1, \"form-label\"], [1, \"range\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"5\", 1, \"form-range\", 3, \"name\", \"disabled\", \"id\", \"min\", \"max\", \"step\", \"value\", \"input\", \"blur\", \"mousedown\", \"mouseup\", \"touchstart\", \"touchend\"], [\"input\", \"\"], [1, \"thumb\", 3, \"ngStyle\", \"ngClass\"], [\"thumb\", \"\"], [1, \"thumb-value\"], [\"thumbValue\", \"\"]],\n      template: function MdbRangeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"label\", 0);\n          i0.ɵɵtext(1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\", 1)(3, \"input\", 2, 3);\n          i0.ɵɵlistener(\"input\", function MdbRangeComponent_Template_input_input_3_listener() {\n            return ctx.thumbPositionUpdate();\n          })(\"blur\", function MdbRangeComponent_Template_input_blur_3_listener() {\n            return ctx.blurRangeInput();\n          })(\"mousedown\", function MdbRangeComponent_Template_input_mousedown_3_listener() {\n            return ctx.focusRangeInput();\n          })(\"mouseup\", function MdbRangeComponent_Template_input_mouseup_3_listener() {\n            return ctx.blurRangeInput();\n          })(\"touchstart\", function MdbRangeComponent_Template_input_touchstart_3_listener() {\n            return ctx.focusRangeInput();\n          })(\"touchend\", function MdbRangeComponent_Template_input_touchend_3_listener() {\n            return ctx.blurRangeInput();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"span\", 4, 5)(7, \"span\", 6, 7);\n          i0.ɵɵtext(9);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.label);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"name\", ctx.name)(\"disabled\", ctx.disabled)(\"id\", ctx.id)(\"min\", ctx.min)(\"max\", ctx.max)(\"step\", ctx.step)(\"value\", ctx.value)(\"id\", ctx.id);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngStyle\", ctx.thumbStyle)(\"ngClass\", i0.ɵɵpureFunction1(12, _c3, ctx.visibility));\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.value);\n        }\n      },\n      dependencies: [i1.NgClass, i1.NgStyle],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MdbRangeComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbRangeModule = /*#__PURE__*/(() => {\n  class MdbRangeModule {\n    static ɵfac = function MdbRangeModule_Factory(t) {\n      return new (t || MdbRangeModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MdbRangeModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, FormsModule]\n    });\n  }\n  return MdbRangeModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbRangeComponent, MdbRangeModule };\n//# sourceMappingURL=mdb-angular-ui-kit-range.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}