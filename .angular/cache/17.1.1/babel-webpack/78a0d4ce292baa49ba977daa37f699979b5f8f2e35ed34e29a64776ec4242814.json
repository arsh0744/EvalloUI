{"ast":null,"code":"import _asyncToGenerator from \"F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../userMgmt/user.service\";\nexport class ServerApiService {\n  constructor(http, Users) {\n    this.http = http;\n    this.Users = Users;\n    this.BaseUrl = \"http://localhost:3000/.netlify/functions/\";\n    //private  BaseUrl =  \"https://evalloserver.netlify.app/.netlify/functions/\" ;\n    this.url_Create_New_CC = this.BaseUrl + 'api/addNewCC';\n    this.url_CallLogin = this.BaseUrl + 'api/checkLogin';\n    this.url_Create_New_Content = this.BaseUrl + 'api/addUserContent';\n    this.url_GetUserContent_By_UserId = this.BaseUrl + 'api/getUserContent';\n  }\n  addNewEvalloCCFunc(NewUser) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this.http.post(_this.url_Create_New_CC, NewUser).subscribe({\n              next: value => {\n                setTimeout(() => {\n                  _this.Users.changeActiveUserId(value.message);\n                }, 3000);\n                resolve({\n                  Error: null,\n                  Message: \"Registered Successfully,Redirecting\"\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"User Not Registered\"\n                });\n              },\n              complete: () => {\n                // console.error(\"complete\") ;\n              }\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  callLoginApi(UserCred) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this2.http.post(_this2.url_CallLogin, UserCred).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                resolve({\n                  Error: null,\n                  Message: value\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"User Not Found\"\n                });\n              },\n              complete: () => {\n                //console.error(\"complete\") ;\n              }\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  addUserContentFunction(Content) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this3.http.post(_this3.url_Create_New_Content, Content).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                resolve({\n                  Error: null,\n                  Message: \"Content Added Successfully\"\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"Content Not Added\"\n                });\n              },\n              complete: () => {}\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  getUserContentFunction(UserIdInput) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this4.http.post(_this4.url_GetUserContent_By_UserId, {\n              UserId: UserIdInput\n            }).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                resolve({\n                  Error: null,\n                  Message: value\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"Content Not Found\"\n                });\n              },\n              complete: () => {}\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  static #_ = this.ɵfac = function ServerApiService_Factory(t) {\n    return new (t || ServerApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServerApiService,\n    factory: ServerApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ServerApiService","constructor","http","Users","BaseUrl","url_Create_New_CC","url_CallLogin","url_Create_New_Content","url_GetUserContent_By_UserId","addNewEvalloCCFunc","NewUser","_this","_asyncToGenerator","Promise","_ref","resolve","reject","post","subscribe","next","value","setTimeout","changeActiveUserId","message","Error","Message","error","console","complete","err","_x","_x2","apply","arguments","callLoginApi","UserCred","_this2","_ref2","log","_x3","_x4","addUserContentFunction","Content","_this3","_ref3","_x5","_x6","getUserContentFunction","UserIdInput","_this4","_ref4","UserId","_x7","_x8","_","i0","ɵɵinject","i1","HttpClient","i2","UserService","_2","factory","ɵfac","providedIn"],"sources":["F:\\Evallo Project\\mdb-proj\\mdb5-free-angular\\src\\app\\services\\server\\server-api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { UserContentModel, UserRegistrationModel } from '../interfaces/interface.service';\r\nimport { UserService } from '../userMgmt/user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n\r\nexport class ServerApiService {\r\n\r\n  constructor(\r\n    private http : HttpClient,\r\n    private Users : UserService\r\n  ) { }\r\n  private  BaseUrl =  \"http://localhost:3000/.netlify/functions/\" ;\r\n  //private  BaseUrl =  \"https://evalloserver.netlify.app/.netlify/functions/\" ;\r\n\r\n  url_Create_New_CC = this.BaseUrl + \r\n                      'api/addNewCC' ;\r\n\r\n  async addNewEvalloCCFunc(NewUser :UserRegistrationModel )\r\n  {\r\n\r\n    return await new Promise(\r\n\r\n     async (resolve,reject) =>\r\n      {\r\n        try\r\n        {\r\n          this.http.post(this.url_Create_New_CC,NewUser).subscribe(\r\n            {\r\n              next: (value:any) => {\r\n                \r\n                setTimeout(() => {\r\n                  this.Users.changeActiveUserId(value.message);\r\n                }, 3000);\r\n                resolve({Error:null,Message: \"Registered Successfully,Redirecting\"}) ;\r\n              },\r\n              error: (error) => {\r\n                console.error(\"error\",error) ;\r\n                reject({Error:true,Message: \"User Not Registered\"}) ;\r\n              },\r\n              complete: () => {\r\n               // console.error(\"complete\") ;\r\n              }\r\n            }\r\n            \r\n          )\r\n        }\r\n        catch(err)\r\n        {\r\n          console.error(err);\r\n          reject({Error:true,Message: \"User Not Registered\"});\r\n        }\r\n      }\r\n    )\r\n\r\n   \r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n  url_CallLogin = this.BaseUrl + \r\n                      'api/checkLogin' ;\r\n\r\n  async callLoginApi(UserCred)\r\n  {\r\n\r\n    return await new Promise(\r\n\r\n     async (resolve,reject) =>\r\n      {\r\n        try\r\n        {\r\n          this.http.post(this.url_CallLogin,UserCred).subscribe(\r\n            {\r\n              next: (value) => {\r\n                console.log(\"next\",value) ;\r\n                resolve({Error:null,Message: value}) ;\r\n              },\r\n              error: (error) => {\r\n                console.error(\"error\",error) ;\r\n                reject({Error:true,Message: \"User Not Found\"}) ;\r\n              },\r\n              complete: () => {\r\n                //console.error(\"complete\") ;\r\n              }\r\n            }\r\n            \r\n          )\r\n        }\r\n        catch(err)\r\n        {\r\n          console.error(err);\r\n          reject({Error:true,Message: \"User Not Registered\"});\r\n        }\r\n      }\r\n    )\r\n\r\n   \r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\nurl_Create_New_Content = this.BaseUrl + \r\n  'api/addUserContent' ;\r\n\r\nasync addUserContentFunction(Content :UserContentModel )\r\n{\r\n\r\nreturn await new Promise(\r\n\r\nasync (resolve,reject) =>\r\n{\r\ntry\r\n{\r\nthis.http.post(this.url_Create_New_Content,Content).subscribe(\r\n{\r\nnext: (value) => {\r\nconsole.log(\"next\",value) ;\r\nresolve({Error:null,Message: \"Content Added Successfully\"}) ;\r\n},\r\nerror: (error) => {\r\nconsole.error(\"error\",error) ;\r\nreject({Error:true,Message: \"Content Not Added\"}) ;\r\n},\r\ncomplete: () => {\r\n}\r\n}\r\n\r\n)\r\n}\r\ncatch(err)\r\n{\r\nconsole.error(err);\r\nreject({Error:true,Message: \"User Not Registered\"});\r\n}\r\n}\r\n)\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nurl_GetUserContent_By_UserId = this.BaseUrl + \r\n  'api/getUserContent' ;\r\n\r\nasync getUserContentFunction(UserIdInput)\r\n{\r\n\r\nreturn await new Promise(\r\n\r\nasync (resolve,reject) =>\r\n{\r\ntry\r\n{\r\nthis.http.post(this.url_GetUserContent_By_UserId,{UserId:UserIdInput}).subscribe(\r\n{\r\nnext: (value) => {\r\nconsole.log(\"next\",value) ;\r\nresolve({Error:null,Message: value}) ;\r\n},\r\nerror: (error) => {\r\nconsole.error(\"error\",error) ;\r\nreject({Error:true,Message: \"Content Not Found\"}) ;\r\n},\r\ncomplete: () => {\r\n}\r\n}\r\n\r\n)\r\n}\r\ncatch(err)\r\n{\r\nconsole.error(err);\r\nreject({Error:true,Message: \"User Not Registered\"});\r\n}\r\n}\r\n)\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n  \r\n\r\n\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}