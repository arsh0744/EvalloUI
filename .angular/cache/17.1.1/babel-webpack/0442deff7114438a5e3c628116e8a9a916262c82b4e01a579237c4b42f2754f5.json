{"ast":null,"code":"import _asyncToGenerator from \"F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../userMgmt/user.service\";\nexport let ServerApiService = /*#__PURE__*/(() => {\n  class ServerApiService {\n    constructor(http, Users) {\n      this.http = http;\n      this.Users = Users;\n      this.BaseUrl = \"http://localhost:3000/.netlify/functions/\";\n      //private  BaseUrl =  \"https://evalloserver.netlify.app/.netlify/functions/\" ;\n      this.url_Create_New_CC = this.BaseUrl + 'api/addNewCC';\n      this.url_CallLogin = this.BaseUrl + 'api/checkLogin';\n      this.url_Create_New_Content = this.BaseUrl + 'api/addUserContent';\n      this.url_GetUserContent_By_UserId = this.BaseUrl + 'api/getUserContent';\n    }\n    addNewEvalloCCFunc(NewUser) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        return yield new Promise( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (resolve, reject) {\n            try {\n              _this.http.post(_this.url_Create_New_CC, NewUser).subscribe({\n                next: value => {\n                  setTimeout(() => {\n                    _this.Users.changeActiveUserId(value.message);\n                  }, 3000);\n                  resolve({\n                    Error: null,\n                    Message: \"Registered Successfully,Redirecting\"\n                  });\n                },\n                error: error => {\n                  console.error(\"error\", error);\n                  reject({\n                    Error: true,\n                    Message: \"User Not Registered\"\n                  });\n                },\n                complete: () => {\n                  // console.error(\"complete\") ;\n                }\n              });\n            } catch (err) {\n              console.error(err);\n              reject({\n                Error: true,\n                Message: \"User Not Registered\"\n              });\n            }\n          });\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n    callLoginApi(UserCred) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        return yield new Promise( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n            try {\n              _this2.http.post(_this2.url_CallLogin, UserCred).subscribe({\n                next: value => {\n                  console.log(\"next\", value);\n                  resolve({\n                    Error: null,\n                    Message: value\n                  });\n                },\n                error: error => {\n                  console.error(\"error\", error);\n                  reject({\n                    Error: true,\n                    Message: \"User Not Found\"\n                  });\n                },\n                complete: () => {\n                  //console.error(\"complete\") ;\n                }\n              });\n            } catch (err) {\n              console.error(err);\n              reject({\n                Error: true,\n                Message: \"User Not Registered\"\n              });\n            }\n          });\n          return function (_x3, _x4) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n    addUserContentFunction(Content) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        return yield new Promise( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n            try {\n              _this3.http.post(_this3.url_Create_New_Content, Content).subscribe({\n                next: value => {\n                  console.log(\"next\", value);\n                  resolve({\n                    Error: null,\n                    Message: \"Content Added Successfully\"\n                  });\n                },\n                error: error => {\n                  console.error(\"error\", error);\n                  reject({\n                    Error: true,\n                    Message: \"Content Not Added\"\n                  });\n                },\n                complete: () => {}\n              });\n            } catch (err) {\n              console.error(err);\n              reject({\n                Error: true,\n                Message: \"User Not Registered\"\n              });\n            }\n          });\n          return function (_x5, _x6) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n    getUserContentFunction(UserIdInput) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        return yield new Promise( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (resolve, reject) {\n            try {\n              _this4.http.post(_this4.url_GetUserContent_By_UserId, {\n                UserId: UserIdInput\n              }).subscribe({\n                next: value => {\n                  console.log(\"next\", value);\n                  resolve({\n                    Error: null,\n                    Message: value\n                  });\n                },\n                error: error => {\n                  console.error(\"error\", error);\n                  reject({\n                    Error: true,\n                    Message: \"Content Not Found\"\n                  });\n                },\n                complete: () => {}\n              });\n            } catch (err) {\n              console.error(err);\n              reject({\n                Error: true,\n                Message: \"User Not Registered\"\n              });\n            }\n          });\n          return function (_x7, _x8) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n    static #_ = this.ɵfac = function ServerApiService_Factory(t) {\n      return new (t || ServerApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ServerApiService,\n      factory: ServerApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ServerApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}