{"ast":null,"code":"import _asyncToGenerator from \"F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerApiService {\n  constructor(http) {\n    this.http = http;\n    this.BaseUrl = \"http://localhost:3000/\";\n    this.url_Create_New_CC = this.BaseUrl + 'api/addNewCC';\n  }\n  addNewEvalloCCFunc(NewUser) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this.http.post(_this.url_Create_New_CC, NewUser).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                response = {\n                  Error: null,\n                  Message: \"Registered Successfully,Redirecting\"\n                };\n              },\n              error: error => {\n                console.error(\"error\", error);\n                response = {\n                  Error: true,\n                  Message: \"User Not Registered\"\n                };\n              },\n              complete: () => {\n                console.error(\"complete\");\n              }\n            });\n          } catch (err) {\n            console.error(err);\n            response = {\n              Error: true,\n              Message: \"User Not Registered\"\n            };\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  static #_ = this.ɵfac = function ServerApiService_Factory(t) {\n    return new (t || ServerApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServerApiService,\n    factory: ServerApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ServerApiService","constructor","http","BaseUrl","url_Create_New_CC","addNewEvalloCCFunc","NewUser","_this","_asyncToGenerator","Promise","_ref","resolve","reject","post","subscribe","next","value","console","log","response","Error","Message","error","complete","err","_x","_x2","apply","arguments","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["F:\\Evallo Project\\mdb-proj\\mdb5-free-angular\\src\\app\\services\\server\\server-api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { UserRegistrationModel } from '../interfaces/interface.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n\r\nexport class ServerApiService {\r\n\r\n  constructor(\r\n    private http : HttpClient\r\n  ) { }\r\n  private  BaseUrl =  \"http://localhost:3000/\" ;\r\n\r\n  url_Create_New_CC = this.BaseUrl + \r\n                      'api/addNewCC' ;\r\n\r\n  async addNewEvalloCCFunc(NewUser :UserRegistrationModel )\r\n  {\r\n\r\n    return await new Promise(\r\n\r\n     async (resolve,reject) =>\r\n      {\r\n        try\r\n        {\r\n          this.http.post(this.url_Create_New_CC,NewUser).subscribe(\r\n            {\r\n              next: (value) => {\r\n                console.log(\"next\",value) ;\r\n                response = {Error:null,Message: \"Registered Successfully,Redirecting\"} ;\r\n              },\r\n              error: (error) => {\r\n                console.error(\"error\",error) ;\r\n                response = {Error:true,Message: \"User Not Registered\"} ;\r\n              },\r\n              complete: () => {\r\n                console.error(\"complete\") ;\r\n              }\r\n            }\r\n            \r\n          )\r\n        }\r\n        catch(err)\r\n        {\r\n          console.error(err);\r\n          response={Error:true,Message: \"User Not Registered\"};\r\n        }\r\n      }\r\n    )\r\n\r\n   \r\n\r\n\r\n    \r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n}\r\n"],"mappings":";;;AASA,OAAM,MAAOA,gBAAgB;EAE3BC,YACUC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAEL,KAAAC,OAAO,GAAI,wBAAwB;IAE5C,KAAAC,iBAAiB,GAAG,IAAI,CAACD,OAAO,GACZ,cAAc;EAJ9B;EAMEE,kBAAkBA,CAACC,OAA8B;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MAGrD,aAAa,IAAIC,OAAO;QAAA,IAAAC,IAAA,GAAAF,iBAAA,CAEvB,WAAOG,OAAO,EAACC,MAAM,EAAI;UAEtB,IACA;YACEL,KAAI,CAACL,IAAI,CAACW,IAAI,CAACN,KAAI,CAACH,iBAAiB,EAACE,OAAO,CAAC,CAACQ,SAAS,CACtD;cACEC,IAAI,EAAGC,KAAK,IAAI;gBACdC,OAAO,CAACC,GAAG,CAAC,MAAM,EAACF,KAAK,CAAC;gBACzBG,QAAQ,GAAG;kBAACC,KAAK,EAAC,IAAI;kBAACC,OAAO,EAAE;gBAAqC,CAAC;cACxE,CAAC;cACDC,KAAK,EAAGA,KAAK,IAAI;gBACfL,OAAO,CAACK,KAAK,CAAC,OAAO,EAACA,KAAK,CAAC;gBAC5BH,QAAQ,GAAG;kBAACC,KAAK,EAAC,IAAI;kBAACC,OAAO,EAAE;gBAAqB,CAAC;cACxD,CAAC;cACDE,QAAQ,EAAEA,CAAA,KAAK;gBACbN,OAAO,CAACK,KAAK,CAAC,UAAU,CAAC;cAC3B;aACD,CAEF;WACF,CACD,OAAME,GAAG,EACT;YACEP,OAAO,CAACK,KAAK,CAACE,GAAG,CAAC;YAClBL,QAAQ,GAAC;cAACC,KAAK,EAAC,IAAI;cAACC,OAAO,EAAE;YAAqB,CAAC;;QAExD,CAAC;QAAA,iBAAAI,EAAA,EAAAC,GAAA;UAAA,OAAAhB,IAAA,CAAAiB,KAAA,OAAAC,SAAA;QAAA;MAAA,IACF;IAAA;EAMH;EAAC,QAAAC,CAAA,G;qBAhDU7B,gBAAgB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBlC,gBAAgB;IAAAmC,OAAA,EAAhBnC,gBAAgB,CAAAoC,IAAA;IAAAC,UAAA,EAJf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}