{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, PLATFORM_ID, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nconst _c0 = [\"mdbScrollspy\", \"\"];\nconst _c1 = [\"*\"];\nclass MdbScrollspyLinkDirective {\n  cdRef;\n  document;\n  get scrollIntoView() {\n    return this._scrollIntoView;\n  }\n  set scrollIntoView(value) {\n    this._scrollIntoView = value;\n  }\n  _scrollIntoView = true;\n  get section() {\n    return this._section;\n  }\n  set section(value) {\n    if (value) {\n      this._section = value;\n    }\n  }\n  _section;\n  _id;\n  constructor(cdRef, document) {\n    this.cdRef = cdRef;\n    this.document = document;\n  }\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  scrollspyLink = true;\n  active = false;\n  onClick() {\n    if (this.section && this.scrollIntoView === true) {\n      this.section.scrollIntoView();\n    }\n  }\n  detectChanges() {\n    this.cdRef.detectChanges();\n  }\n  assignSectionToId() {\n    this.section = this.document.documentElement.querySelector(`#${this.id}`);\n  }\n  ngOnInit() {\n    this.assignSectionToId();\n  }\n  static ɵfac = function MdbScrollspyLinkDirective_Factory(t) {\n    return new (t || MdbScrollspyLinkDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyLinkDirective,\n    selectors: [[\"\", \"mdbScrollspyLink\", \"\"]],\n    hostVars: 4,\n    hostBindings: function MdbScrollspyLinkDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MdbScrollspyLinkDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"scrollspy-link\", ctx.scrollspyLink)(\"active\", ctx.active);\n      }\n    },\n    inputs: {\n      scrollIntoView: \"scrollIntoView\",\n      id: [i0.ɵɵInputFlags.None, \"mdbScrollspyLink\", \"id\"]\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyLinkDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyLink]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    scrollIntoView: [{\n      type: Input\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspyLink']\n    }],\n    scrollspyLink: [{\n      type: HostBinding,\n      args: ['class.scrollspy-link']\n    }],\n    active: [{\n      type: HostBinding,\n      args: ['class.active']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', []]\n    }]\n  });\n})();\nclass MdbScrollspyService {\n  scrollSpys = [];\n  activeSubject = new Subject();\n  active$ = this.activeSubject;\n  addScrollspy(scrollSpy) {\n    this.scrollSpys.push(scrollSpy);\n  }\n  removeScrollspy(scrollSpyId) {\n    const scrollSpyIndex = this.scrollSpys.findIndex(spy => {\n      return spy.id === scrollSpyId;\n    });\n    this.scrollSpys.splice(scrollSpyIndex, 1);\n  }\n  updateActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    this.setActiveLink(activeLink);\n  }\n  removeActiveState(scrollSpyId, activeLinkId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    const activeLink = scrollSpy.links.find(link => {\n      return link.id === activeLinkId;\n    });\n    if (!activeLink) {\n      return;\n    }\n    activeLink.active = false;\n    activeLink.detectChanges();\n  }\n  setActiveLink(activeLink) {\n    if (activeLink) {\n      activeLink.active = true;\n      activeLink.detectChanges();\n      this.activeSubject.next(activeLink);\n    }\n  }\n  removeActiveLinks(scrollSpyId) {\n    const scrollSpy = this.scrollSpys.find(spy => {\n      return spy.id === scrollSpyId;\n    });\n    if (!scrollSpy) {\n      return;\n    }\n    scrollSpy.links.forEach(link => {\n      link.active = false;\n      link.detectChanges();\n    });\n  }\n  static ɵfac = function MdbScrollspyService_Factory(t) {\n    return new (t || MdbScrollspyService)();\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MdbScrollspyService,\n    factory: MdbScrollspyService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyService, [{\n    type: Injectable\n  }], null, null);\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n  scrollSpyService;\n  _elementRef;\n  _renderer;\n  links;\n  _destroy$ = new Subject();\n  get id() {\n    return this._id;\n  }\n  set id(newId) {\n    if (newId) {\n      this._id = newId;\n    }\n  }\n  _id;\n  get collapsible() {\n    return this._collapsible;\n  }\n  set collapsible(value) {\n    this._collapsible = coerceBooleanProperty(value);\n  }\n  _collapsible = false;\n  _isBrowser;\n  activeLinkChange = new EventEmitter();\n  activeSub;\n  constructor(scrollSpyService, _elementRef, _renderer, platformId) {\n    this.scrollSpyService = scrollSpyService;\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._isBrowser = isPlatformBrowser(platformId);\n  }\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  collapsibleElementHeight = 0;\n  ngOnInit() {\n    if (this._isBrowser) {\n      this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n    }\n    this.activeSub = this.scrollSpyService.active$.pipe(takeUntil(this._destroy$), distinctUntilChanged()).subscribe(activeLink => {\n      this.activeLinkChange.emit(activeLink);\n      if (this.collapsible) {\n        this.styleCollapsibleElement();\n      }\n    });\n  }\n  ngAfterContentInit() {\n    this.scrollSpyService.addScrollspy({\n      id: this.id,\n      links: this.links\n    });\n  }\n  ngOnDestroy() {\n    this.scrollSpyService.removeScrollspy(this.id);\n    this._destroy$.next();\n    this._destroy$.complete();\n  }\n  styleCollapsibleElement() {\n    this._renderer.setStyle(this.host, 'overflow', 'hidden');\n    this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n    this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n    const hostSiblings = this.getAllSiblings(this.host);\n    const isAnySiblingActive = hostSiblings.some(element => {\n      return element.classList.contains('active');\n    });\n    if (this.collapsible && isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n    } else if (this.collapsible && !isAnySiblingActive) {\n      this._renderer.setStyle(this.host, 'height', '0px');\n    }\n  }\n  getAllSiblings(element) {\n    let siblings = [];\n    if (!element.parentNode) {\n      return siblings;\n    }\n    let sibling = element.parentNode.firstElementChild;\n    do {\n      if (sibling != element) {\n        siblings.push(sibling);\n      }\n    } while (sibling = sibling.nextElementSibling);\n    return siblings;\n  }\n  static ɵfac = function MdbScrollspyDirective_Factory(t) {\n    return new (t || MdbScrollspyDirective)(i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MdbScrollspyDirective,\n    selectors: [[\"\", \"mdbScrollspy\", \"\"]],\n    contentQueries: function MdbScrollspyDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MdbScrollspyLinkDirective, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.links = _t);\n      }\n    },\n    inputs: {\n      id: [i0.ɵɵInputFlags.None, \"mdbScrollspy\", \"id\"],\n      collapsible: \"collapsible\"\n    },\n    outputs: {\n      activeLinkChange: \"activeLinkChange\"\n    },\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 1,\n    vars: 0,\n    template: function MdbScrollspyDirective_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyDirective, [{\n    type: Component,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/component-selector\n      selector: '[mdbScrollspy]',\n      template: '<ng-content></ng-content>'\n    }]\n  }], function () {\n    return [{\n      type: MdbScrollspyService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    links: [{\n      type: ContentChildren,\n      args: [MdbScrollspyLinkDirective, {\n        descendants: true\n      }]\n    }],\n    id: [{\n      type: Input,\n      args: ['mdbScrollspy']\n    }],\n    collapsible: [{\n      type: Input\n    }],\n    activeLinkChange: [{\n      type: Output\n    }]\n  });\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n  _elementRef;\n  renderer;\n  ngZone;\n  scrollSpyService;\n  _document;\n  id;\n  get host() {\n    return this._elementRef.nativeElement;\n  }\n  container;\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  _scrollSpyId;\n  offset = 0;\n  constructor(_elementRef, renderer, ngZone, scrollSpyService, _document) {\n    this._elementRef = _elementRef;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n    this._document = _document;\n  }\n  isElementInViewport() {\n    const scrollTop = this.container.scrollTop;\n    const elTop = this.host.offsetTop - this.offset;\n    const elHeight = this.host.offsetHeight;\n    return scrollTop >= elTop && scrollTop < elTop + elHeight;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.removeActiveLinks(scrollSpyId);\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(this.container, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.host.id;\n    if (!this.container) {\n      this.container = this._getClosestEl(this.host, '.scrollspy-container');\n    }\n    this.renderer.setStyle(this.container, 'position', 'relative');\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  _getClosestEl(el, selector) {\n    for (; el && el !== this._document; el = el.parentNode) {\n      if (el.matches && el.matches(selector)) {\n        return el;\n      }\n    }\n    return null;\n  }\n  static ɵfac = function MdbScrollspyElementDirective_Factory(t) {\n    return new (t || MdbScrollspyElementDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService), i0.ɵɵdirectiveInject(DOCUMENT));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyElementDirective,\n    selectors: [[\"\", \"mdbScrollspyElement\", \"\"]],\n    inputs: {\n      container: \"container\",\n      scrollSpyId: [i0.ɵɵInputFlags.None, \"mdbScrollspyElement\", \"scrollSpyId\"],\n      offset: \"offset\"\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyElementDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyElement]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    container: [{\n      type: Input\n    }],\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyElement']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyWindowDirective {\n  document;\n  el;\n  renderer;\n  ngZone;\n  scrollSpyService;\n  id;\n  get scrollSpyId() {\n    return this._scrollSpyId;\n  }\n  set scrollSpyId(newId) {\n    if (newId) {\n      this._scrollSpyId = newId;\n    }\n  }\n  _scrollSpyId;\n  offset = 0;\n  constructor(document, el, renderer, ngZone, scrollSpyService) {\n    this.document = document;\n    this.el = el;\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.scrollSpyService = scrollSpyService;\n  }\n  isElementInViewport() {\n    const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n    const elHeight = this.el.nativeElement.offsetHeight;\n    const elTop = this.el.nativeElement.offsetTop - this.offset;\n    const elBottom = elTop + elHeight;\n    return scrollTop >= elTop && scrollTop <= elBottom;\n  }\n  updateActiveState(scrollSpyId, id) {\n    if (this.isElementInViewport()) {\n      this.scrollSpyService.updateActiveState(scrollSpyId, id);\n    } else {\n      this.scrollSpyService.removeActiveState(scrollSpyId, id);\n    }\n  }\n  onScroll() {\n    this.updateActiveState(this.scrollSpyId, this.id);\n  }\n  listenToScroll() {\n    this.renderer.listen(window, 'scroll', () => {\n      this.onScroll();\n    });\n  }\n  ngOnInit() {\n    this.id = this.el.nativeElement.id;\n    this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n  }\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.updateActiveState(this.scrollSpyId, this.id);\n    }, 0);\n  }\n  static ɵfac = function MdbScrollspyWindowDirective_Factory(t) {\n    return new (t || MdbScrollspyWindowDirective)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MdbScrollspyService));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbScrollspyWindowDirective,\n    selectors: [[\"\", \"mdbScrollspyWindow\", \"\"]],\n    inputs: {\n      scrollSpyId: [i0.ɵɵInputFlags.None, \"mdbScrollspyWindow\", \"scrollSpyId\"],\n      offset: \"offset\"\n    }\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyWindowDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbScrollspyWindow]'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i0.NgZone\n    }, {\n      type: MdbScrollspyService\n    }];\n  }, {\n    scrollSpyId: [{\n      type: Input,\n      args: ['mdbScrollspyWindow']\n    }],\n    offset: [{\n      type: Input\n    }]\n  });\n})();\nclass MdbScrollspyModule {\n  static ɵfac = function MdbScrollspyModule_Factory(t) {\n    return new (t || MdbScrollspyModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MdbScrollspyModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [MdbScrollspyService]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbScrollspyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      exports: [MdbScrollspyDirective, MdbScrollspyLinkDirective, MdbScrollspyElementDirective, MdbScrollspyWindowDirective],\n      providers: [MdbScrollspyService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };","map":{"version":3,"names":["i0","Directive","Inject","Input","HostBinding","HostListener","Injectable","EventEmitter","PLATFORM_ID","Component","ContentChildren","Output","NgModule","DOCUMENT","isPlatformBrowser","takeUntil","distinctUntilChanged","Subject","coerceBooleanProperty","_c0","_c1","MdbScrollspyLinkDirective","cdRef","document","scrollIntoView","_scrollIntoView","value","section","_section","_id","constructor","id","newId","scrollspyLink","active","onClick","detectChanges","assignSectionToId","documentElement","querySelector","ngOnInit","ɵfac","MdbScrollspyLinkDirective_Factory","t","ɵɵdirectiveInject","ChangeDetectorRef","ɵdir","ɵɵdefineDirective","type","selectors","hostVars","hostBindings","MdbScrollspyLinkDirective_HostBindings","rf","ctx","ɵɵlistener","MdbScrollspyLinkDirective_click_HostBindingHandler","ɵɵclassProp","inputs","ɵɵInputFlags","None","ngDevMode","ɵsetClassMetadata","args","selector","undefined","decorators","MdbScrollspyService","scrollSpys","activeSubject","active$","addScrollspy","scrollSpy","push","removeScrollspy","scrollSpyId","scrollSpyIndex","findIndex","spy","splice","updateActiveState","activeLinkId","find","activeLink","links","link","setActiveLink","removeActiveState","next","removeActiveLinks","forEach","MdbScrollspyService_Factory","ɵprov","ɵɵdefineInjectable","token","factory","MdbScrollspyDirective","scrollSpyService","_elementRef","_renderer","_destroy$","collapsible","_collapsible","_isBrowser","activeLinkChange","activeSub","platformId","host","nativeElement","collapsibleElementHeight","getBoundingClientRect","height","pipe","subscribe","emit","styleCollapsibleElement","ngAfterContentInit","ngOnDestroy","complete","setStyle","hostSiblings","getAllSiblings","isAnySiblingActive","some","element","classList","contains","siblings","parentNode","sibling","firstElementChild","nextElementSibling","MdbScrollspyDirective_Factory","ElementRef","Renderer2","ɵcmp","ɵɵdefineComponent","contentQueries","MdbScrollspyDirective_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","outputs","attrs","ngContentSelectors","decls","vars","template","MdbScrollspyDirective_Template","ɵɵprojectionDef","ɵɵprojection","encapsulation","Object","descendants","MdbScrollspyElementDirective","renderer","ngZone","_document","container","_scrollSpyId","offset","isElementInViewport","scrollTop","elTop","offsetTop","elHeight","offsetHeight","onScroll","listenToScroll","listen","_getClosestEl","runOutsideAngular","bind","ngAfterViewInit","setTimeout","el","matches","MdbScrollspyElementDirective_Factory","NgZone","MdbScrollspyWindowDirective","body","elBottom","window","MdbScrollspyWindowDirective_Factory","MdbScrollspyModule","MdbScrollspyModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","declarations","exports"],"sources":["F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/mdb-angular-ui-kit/fesm2022/mdb-angular-ui-kit-scrollspy.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Inject, Input, HostBinding, HostListener, Injectable, EventEmitter, PLATFORM_ID, Component, ContentChildren, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport { takeUntil, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nclass MdbScrollspyLinkDirective {\n    cdRef;\n    document;\n    get scrollIntoView() {\n        return this._scrollIntoView;\n    }\n    set scrollIntoView(value) {\n        this._scrollIntoView = value;\n    }\n    _scrollIntoView = true;\n    get section() {\n        return this._section;\n    }\n    set section(value) {\n        if (value) {\n            this._section = value;\n        }\n    }\n    _section;\n    _id;\n    constructor(cdRef, document) {\n        this.cdRef = cdRef;\n        this.document = document;\n    }\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    scrollspyLink = true;\n    active = false;\n    onClick() {\n        if (this.section && this.scrollIntoView === true) {\n            this.section.scrollIntoView();\n        }\n    }\n    detectChanges() {\n        this.cdRef.detectChanges();\n    }\n    assignSectionToId() {\n        this.section = this.document.documentElement.querySelector(`#${this.id}`);\n    }\n    ngOnInit() {\n        this.assignSectionToId();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyLinkDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyLinkDirective, selector: \"[mdbScrollspyLink]\", inputs: { scrollIntoView: \"scrollIntoView\", id: [\"mdbScrollspyLink\", \"id\"] }, host: { listeners: { \"click\": \"onClick()\" }, properties: { \"class.scrollspy-link\": \"this.scrollspyLink\", \"class.active\": \"this.active\" } }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyLinkDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyLink]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { scrollIntoView: [{\n                type: Input\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspyLink']\n            }], scrollspyLink: [{\n                type: HostBinding,\n                args: ['class.scrollspy-link']\n            }], active: [{\n                type: HostBinding,\n                args: ['class.active']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', []]\n            }] } });\n\nclass MdbScrollspyService {\n    scrollSpys = [];\n    activeSubject = new Subject();\n    active$ = this.activeSubject;\n    addScrollspy(scrollSpy) {\n        this.scrollSpys.push(scrollSpy);\n    }\n    removeScrollspy(scrollSpyId) {\n        const scrollSpyIndex = this.scrollSpys.findIndex((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        this.scrollSpys.splice(scrollSpyIndex, 1);\n    }\n    updateActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        this.setActiveLink(activeLink);\n    }\n    removeActiveState(scrollSpyId, activeLinkId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        const activeLink = scrollSpy.links.find((link) => {\n            return link.id === activeLinkId;\n        });\n        if (!activeLink) {\n            return;\n        }\n        activeLink.active = false;\n        activeLink.detectChanges();\n    }\n    setActiveLink(activeLink) {\n        if (activeLink) {\n            activeLink.active = true;\n            activeLink.detectChanges();\n            this.activeSubject.next(activeLink);\n        }\n    }\n    removeActiveLinks(scrollSpyId) {\n        const scrollSpy = this.scrollSpys.find((spy) => {\n            return spy.id === scrollSpyId;\n        });\n        if (!scrollSpy) {\n            return;\n        }\n        scrollSpy.links.forEach((link) => {\n            link.active = false;\n            link.detectChanges();\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyService, decorators: [{\n            type: Injectable\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbScrollspyDirective {\n    scrollSpyService;\n    _elementRef;\n    _renderer;\n    links;\n    _destroy$ = new Subject();\n    get id() {\n        return this._id;\n    }\n    set id(newId) {\n        if (newId) {\n            this._id = newId;\n        }\n    }\n    _id;\n    get collapsible() {\n        return this._collapsible;\n    }\n    set collapsible(value) {\n        this._collapsible = coerceBooleanProperty(value);\n    }\n    _collapsible = false;\n    _isBrowser;\n    activeLinkChange = new EventEmitter();\n    activeSub;\n    constructor(scrollSpyService, _elementRef, _renderer, platformId) {\n        this.scrollSpyService = scrollSpyService;\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._isBrowser = isPlatformBrowser(platformId);\n    }\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    collapsibleElementHeight = 0;\n    ngOnInit() {\n        if (this._isBrowser) {\n            this.collapsibleElementHeight = this.host.getBoundingClientRect().height;\n        }\n        this.activeSub = this.scrollSpyService.active$\n            .pipe(takeUntil(this._destroy$), distinctUntilChanged())\n            .subscribe((activeLink) => {\n            this.activeLinkChange.emit(activeLink);\n            if (this.collapsible) {\n                this.styleCollapsibleElement();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });\n    }\n    ngOnDestroy() {\n        this.scrollSpyService.removeScrollspy(this.id);\n        this._destroy$.next();\n        this._destroy$.complete();\n    }\n    styleCollapsibleElement() {\n        this._renderer.setStyle(this.host, 'overflow', 'hidden');\n        this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');\n        this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');\n        const hostSiblings = this.getAllSiblings(this.host);\n        const isAnySiblingActive = hostSiblings.some((element) => {\n            return element.classList.contains('active');\n        });\n        if (this.collapsible && isAnySiblingActive) {\n            this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);\n        }\n        else if (this.collapsible && !isAnySiblingActive) {\n            this._renderer.setStyle(this.host, 'height', '0px');\n        }\n    }\n    getAllSiblings(element) {\n        let siblings = [];\n        if (!element.parentNode) {\n            return siblings;\n        }\n        let sibling = element.parentNode.firstElementChild;\n        do {\n            if (sibling != element) {\n                siblings.push(sibling);\n            }\n        } while ((sibling = sibling.nextElementSibling));\n        return siblings;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyDirective, deps: [{ token: MdbScrollspyService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyDirective, selector: \"[mdbScrollspy]\", inputs: { id: [\"mdbScrollspy\", \"id\"], collapsible: \"collapsible\" }, outputs: { activeLinkChange: \"activeLinkChange\" }, queries: [{ propertyName: \"links\", predicate: MdbScrollspyLinkDirective, descendants: true }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyDirective, decorators: [{\n            type: Component,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/component-selector\n                    selector: '[mdbScrollspy]',\n                    template: '<ng-content></ng-content>',\n                }]\n        }], ctorParameters: function () { return [{ type: MdbScrollspyService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: Object, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { links: [{\n                type: ContentChildren,\n                args: [MdbScrollspyLinkDirective, { descendants: true }]\n            }], id: [{\n                type: Input,\n                args: ['mdbScrollspy']\n            }], collapsible: [{\n                type: Input\n            }], activeLinkChange: [{\n                type: Output\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbScrollspyElementDirective {\n    _elementRef;\n    renderer;\n    ngZone;\n    scrollSpyService;\n    _document;\n    id;\n    get host() {\n        return this._elementRef.nativeElement;\n    }\n    container;\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    _scrollSpyId;\n    offset = 0;\n    constructor(_elementRef, renderer, ngZone, scrollSpyService, _document) {\n        this._elementRef = _elementRef;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n        this._document = _document;\n    }\n    isElementInViewport() {\n        const scrollTop = this.container.scrollTop;\n        const elTop = this.host.offsetTop - this.offset;\n        const elHeight = this.host.offsetHeight;\n        return scrollTop >= elTop && scrollTop < elTop + elHeight;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.removeActiveLinks(scrollSpyId);\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(this.container, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.host.id;\n        if (!this.container) {\n            this.container = this._getClosestEl(this.host, '.scrollspy-container');\n        }\n        this.renderer.setStyle(this.container, 'position', 'relative');\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    _getClosestEl(el, selector) {\n        for (; el && el !== this._document; el = el.parentNode) {\n            if (el.matches && el.matches(selector)) {\n                return el;\n            }\n        }\n        return null;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyElementDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyElementDirective, selector: \"[mdbScrollspyElement]\", inputs: { container: \"container\", scrollSpyId: [\"mdbScrollspyElement\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyElementDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyElement]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { container: [{\n                type: Input\n            }], scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyElement']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyWindowDirective {\n    document;\n    el;\n    renderer;\n    ngZone;\n    scrollSpyService;\n    id;\n    get scrollSpyId() {\n        return this._scrollSpyId;\n    }\n    set scrollSpyId(newId) {\n        if (newId) {\n            this._scrollSpyId = newId;\n        }\n    }\n    _scrollSpyId;\n    offset = 0;\n    constructor(document, el, renderer, ngZone, scrollSpyService) {\n        this.document = document;\n        this.el = el;\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.scrollSpyService = scrollSpyService;\n    }\n    isElementInViewport() {\n        const scrollTop = this.document.documentElement.scrollTop || this.document.body.scrollTop;\n        const elHeight = this.el.nativeElement.offsetHeight;\n        const elTop = this.el.nativeElement.offsetTop - this.offset;\n        const elBottom = elTop + elHeight;\n        return scrollTop >= elTop && scrollTop <= elBottom;\n    }\n    updateActiveState(scrollSpyId, id) {\n        if (this.isElementInViewport()) {\n            this.scrollSpyService.updateActiveState(scrollSpyId, id);\n        }\n        else {\n            this.scrollSpyService.removeActiveState(scrollSpyId, id);\n        }\n    }\n    onScroll() {\n        this.updateActiveState(this.scrollSpyId, this.id);\n    }\n    listenToScroll() {\n        this.renderer.listen(window, 'scroll', () => {\n            this.onScroll();\n        });\n    }\n    ngOnInit() {\n        this.id = this.el.nativeElement.id;\n        this.ngZone.runOutsideAngular(this.listenToScroll.bind(this));\n    }\n    ngAfterViewInit() {\n        setTimeout(() => {\n            this.updateActiveState(this.scrollSpyId, this.id);\n        }, 0);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyWindowDirective, deps: [{ token: DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.NgZone }, { token: MdbScrollspyService }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbScrollspyWindowDirective, selector: \"[mdbScrollspyWindow]\", inputs: { scrollSpyId: [\"mdbScrollspyWindow\", \"scrollSpyId\"], offset: \"offset\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyWindowDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbScrollspyWindow]',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.NgZone }, { type: MdbScrollspyService }]; }, propDecorators: { scrollSpyId: [{\n                type: Input,\n                args: ['mdbScrollspyWindow']\n            }], offset: [{\n                type: Input\n            }] } });\n\nclass MdbScrollspyModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, declarations: [MdbScrollspyDirective,\n            MdbScrollspyLinkDirective,\n            MdbScrollspyElementDirective,\n            MdbScrollspyWindowDirective], exports: [MdbScrollspyDirective,\n            MdbScrollspyLinkDirective,\n            MdbScrollspyElementDirective,\n            MdbScrollspyWindowDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, providers: [MdbScrollspyService] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbScrollspyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    exports: [\n                        MdbScrollspyDirective,\n                        MdbScrollspyLinkDirective,\n                        MdbScrollspyElementDirective,\n                        MdbScrollspyWindowDirective,\n                    ],\n                    providers: [MdbScrollspyService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbScrollspyDirective, MdbScrollspyElementDirective, MdbScrollspyLinkDirective, MdbScrollspyModule, MdbScrollspyService, MdbScrollspyWindowDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}