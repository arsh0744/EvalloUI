{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Directive, Input, Output, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nconst MDB_CHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n  useExisting: forwardRef(() => MdbCheckboxDirective),\n  multi: true\n};\nclass MdbCheckboxChange {\n  element;\n  checked;\n}\nclass MdbCheckboxDirective {\n  get checked() {\n    return this._checked;\n  }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n  }\n  _checked = false;\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this._value = value;\n  }\n  _value = null;\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  _disabled = false;\n  checkboxChange = new EventEmitter();\n  get isDisabled() {\n    return this._disabled;\n  }\n  get isChecked() {\n    return this._checked;\n  }\n  onCheckboxClick() {\n    this.toggle();\n  }\n  onBlur() {\n    this.onTouched();\n  }\n  constructor() {}\n  get changeEvent() {\n    const newChangeEvent = new MdbCheckboxChange();\n    newChangeEvent.element = this;\n    newChangeEvent.checked = this.checked;\n    return newChangeEvent;\n  }\n  toggle() {\n    if (this.disabled) {\n      return;\n    }\n    this._checked = !this._checked;\n    this.onChange(this.checked);\n    this.onCheckboxChange();\n  }\n  onCheckboxChange() {\n    this.checkboxChange.emit(this.changeEvent);\n  }\n  // Control Value Accessor Methods\n  onChange = _ => {};\n  onTouched = () => {};\n  writeValue(value) {\n    this.value = value;\n    this.checked = !!value;\n  }\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  static ngAcceptInputType_checked;\n  static ngAcceptInputType_disabled;\n  static ɵfac = function MdbCheckboxDirective_Factory(t) {\n    return new (t || MdbCheckboxDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbCheckboxDirective,\n    selectors: [[\"\", \"mdbCheckbox\", \"\"]],\n    hostVars: 2,\n    hostBindings: function MdbCheckboxDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function MdbCheckboxDirective_click_HostBindingHandler() {\n          return ctx.onCheckboxClick();\n        })(\"blur\", function MdbCheckboxDirective_blur_HostBindingHandler() {\n          return ctx.onBlur();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"disabled\", ctx.isDisabled)(\"checked\", ctx.isChecked);\n      }\n    },\n    inputs: {\n      checked: \"checked\",\n      value: \"value\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      checkboxChange: \"checkboxChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([MDB_CHECKBOX_VALUE_ACCESSOR])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbCheckboxDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbCheckbox]',\n      providers: [MDB_CHECKBOX_VALUE_ACCESSOR]\n    }]\n  }], function () {\n    return [];\n  }, {\n    checked: [{\n      type: Input,\n      args: ['checked']\n    }],\n    value: [{\n      type: Input,\n      args: ['value']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['disabled']\n    }],\n    checkboxChange: [{\n      type: Output\n    }],\n    isDisabled: [{\n      type: HostBinding,\n      args: ['disabled']\n    }],\n    isChecked: [{\n      type: HostBinding,\n      args: ['checked']\n    }],\n    onCheckboxClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }]\n  });\n})();\nclass MdbCheckboxModule {\n  static ɵfac = function MdbCheckboxModule_Factory(t) {\n    return new (t || MdbCheckboxModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MdbCheckboxModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbCheckboxModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbCheckboxDirective],\n      exports: [MdbCheckboxDirective],\n      imports: [CommonModule, FormsModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MDB_CHECKBOX_VALUE_ACCESSOR, MdbCheckboxChange, MdbCheckboxDirective, MdbCheckboxModule };","map":{"version":3,"names":["coerceBooleanProperty","i0","forwardRef","EventEmitter","Directive","Input","Output","HostBinding","HostListener","NgModule","NG_VALUE_ACCESSOR","FormsModule","CommonModule","MDB_CHECKBOX_VALUE_ACCESSOR","provide","useExisting","MdbCheckboxDirective","multi","MdbCheckboxChange","element","checked","_checked","value","_value","disabled","_disabled","checkboxChange","isDisabled","isChecked","onCheckboxClick","toggle","onBlur","onTouched","constructor","changeEvent","newChangeEvent","onChange","onCheckboxChange","emit","_","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","ngAcceptInputType_checked","ngAcceptInputType_disabled","ɵfac","MdbCheckboxDirective_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","hostVars","hostBindings","MdbCheckboxDirective_HostBindings","rf","ctx","ɵɵlistener","MdbCheckboxDirective_click_HostBindingHandler","MdbCheckboxDirective_blur_HostBindingHandler","ɵɵhostProperty","inputs","outputs","features","ɵɵProvidersFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","MdbCheckboxModule","MdbCheckboxModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/mdb-angular-ui-kit/fesm2022/mdb-angular-ui-kit-checkbox.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Directive, Input, Output, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nconst MDB_CHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line no-use-before-define, @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => MdbCheckboxDirective),\n    multi: true,\n};\nclass MdbCheckboxChange {\n    element;\n    checked;\n}\nclass MdbCheckboxDirective {\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n    }\n    _checked = false;\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    _value = null;\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    _disabled = false;\n    checkboxChange = new EventEmitter();\n    get isDisabled() {\n        return this._disabled;\n    }\n    get isChecked() {\n        return this._checked;\n    }\n    onCheckboxClick() {\n        this.toggle();\n    }\n    onBlur() {\n        this.onTouched();\n    }\n    constructor() { }\n    get changeEvent() {\n        const newChangeEvent = new MdbCheckboxChange();\n        newChangeEvent.element = this;\n        newChangeEvent.checked = this.checked;\n        return newChangeEvent;\n    }\n    toggle() {\n        if (this.disabled) {\n            return;\n        }\n        this._checked = !this._checked;\n        this.onChange(this.checked);\n        this.onCheckboxChange();\n    }\n    onCheckboxChange() {\n        this.checkboxChange.emit(this.changeEvent);\n    }\n    // Control Value Accessor Methods\n    onChange = (_) => { };\n    onTouched = () => { };\n    writeValue(value) {\n        this.value = value;\n        this.checked = !!value;\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    static ngAcceptInputType_checked;\n    static ngAcceptInputType_disabled;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbCheckboxDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbCheckboxDirective, selector: \"[mdbCheckbox]\", inputs: { checked: \"checked\", value: \"value\", disabled: \"disabled\" }, outputs: { checkboxChange: \"checkboxChange\" }, host: { listeners: { \"click\": \"onCheckboxClick()\", \"blur\": \"onBlur()\" }, properties: { \"disabled\": \"this.isDisabled\", \"checked\": \"this.isChecked\" } }, providers: [MDB_CHECKBOX_VALUE_ACCESSOR], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbCheckboxDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbCheckbox]',\n                    providers: [MDB_CHECKBOX_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: function () { return []; }, propDecorators: { checked: [{\n                type: Input,\n                args: ['checked']\n            }], value: [{\n                type: Input,\n                args: ['value']\n            }], disabled: [{\n                type: Input,\n                args: ['disabled']\n            }], checkboxChange: [{\n                type: Output\n            }], isDisabled: [{\n                type: HostBinding,\n                args: ['disabled']\n            }], isChecked: [{\n                type: HostBinding,\n                args: ['checked']\n            }], onCheckboxClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass MdbCheckboxModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbCheckboxModule, declarations: [MdbCheckboxDirective], imports: [CommonModule, FormsModule], exports: [MdbCheckboxDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbCheckboxModule, imports: [CommonModule, FormsModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MdbCheckboxDirective],\n                    exports: [MdbCheckboxDirective],\n                    imports: [CommonModule, FormsModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MDB_CHECKBOX_VALUE_ACCESSOR, MdbCheckboxChange, MdbCheckboxDirective, MdbCheckboxModule };\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,uBAAuB;AAC7D,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,YAAY,EAAEC,SAAS,EAAEC,KAAK,EAAEC,MAAM,EAAEC,WAAW,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,eAAe;AACvH,SAASC,iBAAiB,EAAEC,WAAW,QAAQ,gBAAgB;AAC/D,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,MAAMC,2BAA2B,GAAG;EAChCC,OAAO,EAAEJ,iBAAiB;EAC1B;EACAK,WAAW,EAAEb,UAAU,CAAC,MAAMc,oBAAoB,CAAC;EACnDC,KAAK,EAAE;AACX,CAAC;AACD,MAAMC,iBAAiB,CAAC;EACpBC,OAAO;EACPC,OAAO;AACX;AACA,MAAMJ,oBAAoB,CAAC;EACvB,IAAII,OAAOA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,QAAQ;EACxB;EACA,IAAID,OAAOA,CAACE,KAAK,EAAE;IACf,IAAI,CAACD,QAAQ,GAAGrB,qBAAqB,CAACsB,KAAK,CAAC;EAChD;EACAD,QAAQ,GAAG,KAAK;EAChB,IAAIC,KAAKA,CAAA,EAAG;IACR,OAAO,IAAI,CAACC,MAAM;EACtB;EACA,IAAID,KAAKA,CAACA,KAAK,EAAE;IACb,IAAI,CAACC,MAAM,GAAGD,KAAK;EACvB;EACAC,MAAM,GAAG,IAAI;EACb,IAAIC,QAAQA,CAAA,EAAG;IACX,OAAO,IAAI,CAACC,SAAS;EACzB;EACA,IAAID,QAAQA,CAACF,KAAK,EAAE;IAChB,IAAI,CAACG,SAAS,GAAGzB,qBAAqB,CAACsB,KAAK,CAAC;EACjD;EACAG,SAAS,GAAG,KAAK;EACjBC,cAAc,GAAG,IAAIvB,YAAY,CAAC,CAAC;EACnC,IAAIwB,UAAUA,CAAA,EAAG;IACb,OAAO,IAAI,CAACF,SAAS;EACzB;EACA,IAAIG,SAASA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACP,QAAQ;EACxB;EACAQ,eAAeA,CAAA,EAAG;IACd,IAAI,CAACC,MAAM,CAAC,CAAC;EACjB;EACAC,MAAMA,CAAA,EAAG;IACL,IAAI,CAACC,SAAS,CAAC,CAAC;EACpB;EACAC,WAAWA,CAAA,EAAG,CAAE;EAChB,IAAIC,WAAWA,CAAA,EAAG;IACd,MAAMC,cAAc,GAAG,IAAIjB,iBAAiB,CAAC,CAAC;IAC9CiB,cAAc,CAAChB,OAAO,GAAG,IAAI;IAC7BgB,cAAc,CAACf,OAAO,GAAG,IAAI,CAACA,OAAO;IACrC,OAAOe,cAAc;EACzB;EACAL,MAAMA,CAAA,EAAG;IACL,IAAI,IAAI,CAACN,QAAQ,EAAE;MACf;IACJ;IACA,IAAI,CAACH,QAAQ,GAAG,CAAC,IAAI,CAACA,QAAQ;IAC9B,IAAI,CAACe,QAAQ,CAAC,IAAI,CAAChB,OAAO,CAAC;IAC3B,IAAI,CAACiB,gBAAgB,CAAC,CAAC;EAC3B;EACAA,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACX,cAAc,CAACY,IAAI,CAAC,IAAI,CAACJ,WAAW,CAAC;EAC9C;EACA;EACAE,QAAQ,GAAIG,CAAC,IAAK,CAAE,CAAC;EACrBP,SAAS,GAAGA,CAAA,KAAM,CAAE,CAAC;EACrBQ,UAAUA,CAAClB,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACF,OAAO,GAAG,CAAC,CAACE,KAAK;EAC1B;EACAmB,gBAAgBA,CAACC,EAAE,EAAE;IACjB,IAAI,CAACN,QAAQ,GAAGM,EAAE;EACtB;EACAC,iBAAiBA,CAACD,EAAE,EAAE;IAClB,IAAI,CAACV,SAAS,GAAGU,EAAE;EACvB;EACAE,gBAAgBA,CAACjB,UAAU,EAAE;IACzB,IAAI,CAACH,QAAQ,GAAGG,UAAU;EAC9B;EACA,OAAOkB,yBAAyB;EAChC,OAAOC,0BAA0B;EACjC,OAAOC,IAAI,YAAAC,6BAAAC,CAAA;IAAA,YAAAA,CAAA,IAAwFjC,oBAAoB;EAAA;EACvH,OAAOkC,IAAI,kBAD8EjD,EAAE,CAAAkD,iBAAA;IAAAC,IAAA,EACJpC,oBAAoB;IAAAqC,SAAA;IAAAC,QAAA;IAAAC,YAAA,WAAAC,kCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QADlBxD,EAAE,CAAA0D,UAAA,mBAAAC,8CAAA;UAAA,OACJF,GAAA,CAAA7B,eAAA,CAAgB,CAAC;QAAA,oBAAAgC,6CAAA;UAAA,OAAjBH,GAAA,CAAA3B,MAAA,CAAO,CAAC;QAAA;MAAA;MAAA,IAAA0B,EAAA;QADNxD,EAAE,CAAA6D,cAAA,aAAAJ,GAAA,CAAA/B,UAAA,aAAA+B,GAAA,CAAA9B,SAAA;MAAA;IAAA;IAAAmC,MAAA;MAAA3C,OAAA;MAAAE,KAAA;MAAAE,QAAA;IAAA;IAAAwC,OAAA;MAAAtC,cAAA;IAAA;IAAAuC,QAAA,GAAFhE,EAAE,CAAAiE,kBAAA,CACoU,CAACrD,2BAA2B,CAAC;EAAA;AAChc;AACA;EAAA,QAAAsD,SAAA,oBAAAA,SAAA,KAH6FlE,EAAE,CAAAmE,iBAAA,CAGJpD,oBAAoB,EAAc,CAAC;IAClHoC,IAAI,EAAEhD,SAAS;IACfiE,IAAI,EAAE,CAAC;MACC;MACAC,QAAQ,EAAE,eAAe;MACzBC,SAAS,EAAE,CAAC1D,2BAA2B;IAC3C,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,EAAE;EAAE,CAAC,EAAkB;IAAEO,OAAO,EAAE,CAAC;MACpEgC,IAAI,EAAE/C,KAAK;MACXgE,IAAI,EAAE,CAAC,SAAS;IACpB,CAAC,CAAC;IAAE/C,KAAK,EAAE,CAAC;MACR8B,IAAI,EAAE/C,KAAK;MACXgE,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAE7C,QAAQ,EAAE,CAAC;MACX4B,IAAI,EAAE/C,KAAK;MACXgE,IAAI,EAAE,CAAC,UAAU;IACrB,CAAC,CAAC;IAAE3C,cAAc,EAAE,CAAC;MACjB0B,IAAI,EAAE9C;IACV,CAAC,CAAC;IAAEqB,UAAU,EAAE,CAAC;MACbyB,IAAI,EAAE7C,WAAW;MACjB8D,IAAI,EAAE,CAAC,UAAU;IACrB,CAAC,CAAC;IAAEzC,SAAS,EAAE,CAAC;MACZwB,IAAI,EAAE7C,WAAW;MACjB8D,IAAI,EAAE,CAAC,SAAS;IACpB,CAAC,CAAC;IAAExC,eAAe,EAAE,CAAC;MAClBuB,IAAI,EAAE5C,YAAY;MAClB6D,IAAI,EAAE,CAAC,OAAO;IAClB,CAAC,CAAC;IAAEtC,MAAM,EAAE,CAAC;MACTqB,IAAI,EAAE5C,YAAY;MAClB6D,IAAI,EAAE,CAAC,MAAM;IACjB,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAMG,iBAAiB,CAAC;EACpB,OAAOzB,IAAI,YAAA0B,0BAAAxB,CAAA;IAAA,YAAAA,CAAA,IAAwFuB,iBAAiB;EAAA;EACpH,OAAOE,IAAI,kBArC8EzE,EAAE,CAAA0E,gBAAA;IAAAvB,IAAA,EAqCSoB;EAAiB;EACrH,OAAOI,IAAI,kBAtC8E3E,EAAE,CAAA4E,gBAAA;IAAAC,OAAA,GAsCsClE,YAAY,EAAED,WAAW;EAAA;AAC9J;AACA;EAAA,QAAAwD,SAAA,oBAAAA,SAAA,KAxC6FlE,EAAE,CAAAmE,iBAAA,CAwCJI,iBAAiB,EAAc,CAAC;IAC/GpB,IAAI,EAAE3C,QAAQ;IACd4D,IAAI,EAAE,CAAC;MACCU,YAAY,EAAE,CAAC/D,oBAAoB,CAAC;MACpCgE,OAAO,EAAE,CAAChE,oBAAoB,CAAC;MAC/B8D,OAAO,EAAE,CAAClE,YAAY,EAAED,WAAW;IACvC,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASE,2BAA2B,EAAEK,iBAAiB,EAAEF,oBAAoB,EAAEwD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}