{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, ElementRef, Component, ChangeDetectionStrategy, ViewChild, ContentChild, HostBinding, Optional, Self, Input, HostListener, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/observers';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i2 from '@angular/cdk/text-field';\nimport { CommonModule } from '@angular/common';\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nconst _c0 = [\"notchLeading\"];\nconst _c1 = [\"notchMiddle\"];\nconst _c2 = [\"*\"];\nclass MdbAbstractFormControl {\n  stateChanges;\n  input;\n  labelActive;\n  static ɵfac = function MdbAbstractFormControl_Factory(t) {\n    return new (t || MdbAbstractFormControl)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbAbstractFormControl\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbAbstractFormControl, [{\n    type: Directive\n  }], null, null);\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbLabelDirective {\n  constructor() {}\n  static ɵfac = function MdbLabelDirective_Factory(t) {\n    return new (t || MdbLabelDirective)();\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbLabelDirective,\n    selectors: [[\"\", \"mdbLabel\", \"\"]],\n    exportAs: [\"mdbLabel\"]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbLabelDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbLabel]',\n      exportAs: 'mdbLabel'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass MdbFormControlComponent {\n  _renderer;\n  _contentObserver;\n  _elementRef;\n  _ngZone;\n  _notchLeading;\n  _notchMiddle;\n  _formControl;\n  _label;\n  outline = true;\n  display = true;\n  get input() {\n    return this._formControl.input;\n  }\n  constructor(_renderer, _contentObserver, _elementRef, _ngZone) {\n    this._renderer = _renderer;\n    this._contentObserver = _contentObserver;\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n  }\n  _destroy$ = new Subject();\n  _notchLeadingLength = 9;\n  _labelMarginLeft = 0;\n  _labelGapPadding = 8;\n  _labelScale = 0.8;\n  _recalculateGapWhenVisible = false;\n  ngAfterContentInit() {\n    if (this._label) {\n      setTimeout(() => {\n        this._updateBorderGap();\n      }, 0);\n    } else {\n      this._renderer.addClass(this.input, 'placeholder-active');\n    }\n    this._updateLabelActiveState();\n    if (this._label) {\n      this._contentObserver.observe(this._label.nativeElement).pipe(takeUntil(this._destroy$)).subscribe(() => {\n        this._updateBorderGap();\n      });\n    }\n    this._formControl.stateChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {\n      this._updateLabelActiveState();\n      if (this._label) {\n        this._updateBorderGap();\n      }\n    });\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.pipe(takeUntil(this._destroy$)).subscribe(() => {\n        if (this._label && this._recalculateGapWhenVisible) {\n          this._updateBorderGap();\n        }\n      });\n    });\n  }\n  ngOnDestroy() {\n    this._destroy$.next();\n    this._destroy$.unsubscribe();\n  }\n  _getLabelWidth() {\n    return this._label.nativeElement.clientWidth * this._labelScale + this._labelGapPadding;\n  }\n  _updateBorderGap() {\n    // Element is in DOM but is not visible, we need to recalculate the gap when element\n    // is displayed. This problem may occur in components such as tabs where content of\n    // inactive tabs has display:none styles\n    if (this._isHidden()) {\n      this._recalculateGapWhenVisible = true;\n      return;\n    }\n    const notchLeadingWidth = `${this._labelMarginLeft + this._notchLeadingLength}px`;\n    const notchMiddleWidth = `${this._getLabelWidth()}px`;\n    this._notchLeading.nativeElement.style.width = notchLeadingWidth;\n    this._notchMiddle.nativeElement.style.width = notchMiddleWidth;\n    this._label.nativeElement.style.marginLeft = `${this._labelMarginLeft}px`;\n    this._recalculateGapWhenVisible = false;\n  }\n  _updateLabelActiveState() {\n    if (this._isLabelActive()) {\n      this._renderer.addClass(this.input, 'active');\n    } else {\n      this._renderer.removeClass(this.input, 'active');\n    }\n  }\n  _isLabelActive() {\n    return this._formControl && this._formControl.labelActive;\n  }\n  _isHidden() {\n    const el = this._elementRef.nativeElement;\n    return !el.offsetHeight && !el.offsetWidth;\n  }\n  static ɵfac = function MdbFormControlComponent_Factory(t) {\n    return new (t || MdbFormControlComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.ContentObserver), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n  static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MdbFormControlComponent,\n    selectors: [[\"mdb-form-control\"]],\n    contentQueries: function MdbFormControlComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, MdbAbstractFormControl, 7);\n        i0.ɵɵcontentQuery(dirIndex, MdbLabelDirective, 7, ElementRef);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._formControl = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._label = _t.first);\n      }\n    },\n    viewQuery: function MdbFormControlComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(_c1, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._notchLeading = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._notchMiddle = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function MdbFormControlComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"form-outline\", ctx.outline)(\"d-block\", ctx.display);\n      }\n    },\n    ngContentSelectors: _c2,\n    decls: 7,\n    vars: 0,\n    consts: [[1, \"form-notch\"], [1, \"form-notch-leading\"], [\"notchLeading\", \"\"], [1, \"form-notch-middle\"], [\"notchMiddle\", \"\"], [1, \"form-notch-trailing\"]],\n    template: function MdbFormControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n        i0.ɵɵelementStart(1, \"div\", 0);\n        i0.ɵɵelement(2, \"div\", 1, 2)(4, \"div\", 3, 4)(6, \"div\", 5);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbFormControlComponent, [{\n    type: Component,\n    args: [{\n      selector: 'mdb-form-control',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<ng-content></ng-content>\\n<div class=\\\"form-notch\\\">\\n  <div #notchLeading class=\\\"form-notch-leading\\\"></div>\\n  <div #notchMiddle class=\\\"form-notch-middle\\\"></div>\\n  <div class=\\\"form-notch-trailing\\\"></div>\\n</div>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.ContentObserver\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    _notchLeading: [{\n      type: ViewChild,\n      args: ['notchLeading', {\n        static: true\n      }]\n    }],\n    _notchMiddle: [{\n      type: ViewChild,\n      args: ['notchMiddle', {\n        static: true\n      }]\n    }],\n    _formControl: [{\n      type: ContentChild,\n      args: [MdbAbstractFormControl, {\n        static: true\n      }]\n    }],\n    _label: [{\n      type: ContentChild,\n      args: [MdbLabelDirective, {\n        static: true,\n        read: ElementRef\n      }]\n    }],\n    outline: [{\n      type: HostBinding,\n      args: ['class.form-outline']\n    }],\n    display: [{\n      type: HostBinding,\n      args: ['class.d-block']\n    }]\n  });\n})();\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbInputDirective {\n  _elementRef;\n  _renderer;\n  _ngControl;\n  _autofill;\n  constructor(_elementRef, _renderer, _ngControl, _autofill) {\n    this._elementRef = _elementRef;\n    this._renderer = _renderer;\n    this._ngControl = _ngControl;\n    this._autofill = _autofill;\n  }\n  stateChanges = new Subject();\n  _focused = false;\n  _autofilled = false;\n  _color = '';\n  ngAfterViewInit() {\n    if (typeof getComputedStyle === 'function') {\n      this._color = getComputedStyle(this._elementRef.nativeElement).color;\n      if (this._hasTypeInterferingPlaceholder()) {\n        this._updateTextColorForDateType();\n      }\n    }\n    this._autofill.monitor(this.input).subscribe(event => {\n      this._autofilled = event.isAutofilled;\n      this.stateChanges.next();\n    });\n  }\n  _currentNativeValue;\n  get disabled() {\n    if (this._ngControl && this._ngControl.disabled !== null) {\n      return this._ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  _disabled = false;\n  get readonly() {\n    return this._readonly;\n  }\n  set readonly(value) {\n    if (value) {\n      this._renderer.setAttribute(this._elementRef.nativeElement, 'readonly', '');\n    } else {\n      this._renderer.removeAttribute(this._elementRef.nativeElement, 'readonly');\n    }\n    this._readonly = coerceBooleanProperty(value);\n  }\n  _readonly = false;\n  get value() {\n    return this._elementRef.nativeElement.value;\n  }\n  set value(value) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this._value = value;\n      this.stateChanges.next();\n    }\n  }\n  _value;\n  _updateTextColorForDateType() {\n    const actualColor = getComputedStyle(this._elementRef.nativeElement).color;\n    this._color = actualColor !== 'rgba(0, 0, 0, 0)' ? actualColor : this._color;\n    const color = this.labelActive ? this._color : `transparent`;\n    this._renderer.setStyle(this._elementRef.nativeElement, 'color', color);\n  }\n  _onFocus() {\n    this._focused = true;\n    if (this._hasTypeInterferingPlaceholder()) {\n      this._updateTextColorForDateType();\n    }\n    this.stateChanges.next();\n  }\n  _onBlur() {\n    this._focused = false;\n    if (this._hasTypeInterferingPlaceholder()) {\n      this._updateTextColorForDateType();\n    }\n    this.stateChanges.next();\n  }\n  ngDoCheck() {\n    const value = this._elementRef.nativeElement.value;\n    if (this._currentNativeValue !== value) {\n      this._currentNativeValue = value;\n      this.stateChanges.next();\n    }\n  }\n  get hasValue() {\n    return this._elementRef.nativeElement.value !== '';\n  }\n  get focused() {\n    return this._focused;\n  }\n  get autofilled() {\n    return this._autofilled;\n  }\n  get input() {\n    return this._elementRef.nativeElement;\n  }\n  get labelActive() {\n    return this.focused || this.hasValue || this.autofilled;\n  }\n  _hasTypeInterferingPlaceholder() {\n    const typesArray = ['date', 'datetime-local', 'time', 'month', 'week'];\n    return typesArray.includes(this._elementRef.nativeElement.type);\n  }\n  static ngAcceptInputType_disabled;\n  static ngAcceptInputType_readonly;\n  ngOnDestroy() {\n    this._autofill.stopMonitoring(this.input);\n  }\n  static ɵfac = function MdbInputDirective_Factory(t) {\n    return new (t || MdbInputDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1$1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AutofillMonitor));\n  };\n  static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MdbInputDirective,\n    selectors: [[\"\", \"mdbInput\", \"\"]],\n    hostVars: 1,\n    hostBindings: function MdbInputDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MdbInputDirective_focus_HostBindingHandler() {\n          return ctx._onFocus();\n        })(\"blur\", function MdbInputDirective_blur_HostBindingHandler() {\n          return ctx._onBlur();\n        });\n      }\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      readonly: \"readonly\",\n      value: \"value\"\n    },\n    exportAs: [\"mdbInput\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MdbAbstractFormControl,\n      useExisting: MdbInputDirective\n    }])]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbInputDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: '[mdbInput]',\n      exportAs: 'mdbInput',\n      providers: [{\n        provide: MdbAbstractFormControl,\n        useExisting: MdbInputDirective\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i1$1.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.AutofillMonitor\n    }];\n  }, {\n    disabled: [{\n      type: HostBinding,\n      args: ['disabled']\n    }, {\n      type: Input,\n      args: ['disabled']\n    }],\n    readonly: [{\n      type: Input,\n      args: ['readonly']\n    }],\n    value: [{\n      type: Input\n    }],\n    _onFocus: [{\n      type: HostListener,\n      args: ['focus']\n    }],\n    _onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }]\n  });\n})();\nclass MdbFormsModule {\n  static ɵfac = function MdbFormsModule_Factory(t) {\n    return new (t || MdbFormsModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MdbFormsModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, FormsModule]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MdbFormsModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n      exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n      imports: [CommonModule, FormsModule]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbAbstractFormControl, MdbFormControlComponent, MdbFormsModule, MdbInputDirective, MdbLabelDirective };","map":{"version":3,"names":["i0","Directive","ElementRef","Component","ChangeDetectionStrategy","ViewChild","ContentChild","HostBinding","Optional","Self","Input","HostListener","NgModule","Subject","takeUntil","i1","coerceBooleanProperty","i1$1","FormsModule","i2","CommonModule","_c0","_c1","_c2","MdbAbstractFormControl","stateChanges","input","labelActive","ɵfac","MdbAbstractFormControl_Factory","t","ɵdir","ɵɵdefineDirective","type","ngDevMode","ɵsetClassMetadata","MdbLabelDirective","constructor","MdbLabelDirective_Factory","selectors","exportAs","args","selector","MdbFormControlComponent","_renderer","_contentObserver","_elementRef","_ngZone","_notchLeading","_notchMiddle","_formControl","_label","outline","display","_destroy$","_notchLeadingLength","_labelMarginLeft","_labelGapPadding","_labelScale","_recalculateGapWhenVisible","ngAfterContentInit","setTimeout","_updateBorderGap","addClass","_updateLabelActiveState","observe","nativeElement","pipe","subscribe","runOutsideAngular","onStable","ngOnDestroy","next","unsubscribe","_getLabelWidth","clientWidth","_isHidden","notchLeadingWidth","notchMiddleWidth","style","width","marginLeft","_isLabelActive","removeClass","el","offsetHeight","offsetWidth","MdbFormControlComponent_Factory","ɵɵdirectiveInject","Renderer2","ContentObserver","NgZone","ɵcmp","ɵɵdefineComponent","contentQueries","MdbFormControlComponent_ContentQueries","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MdbFormControlComponent_Query","ɵɵviewQuery","hostVars","hostBindings","MdbFormControlComponent_HostBindings","ɵɵclassProp","ngContentSelectors","decls","vars","consts","template","MdbFormControlComponent_Template","ɵɵprojectionDef","ɵɵprojection","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","encapsulation","changeDetection","OnPush","static","read","MdbInputDirective","_ngControl","_autofill","_focused","_autofilled","_color","ngAfterViewInit","getComputedStyle","color","_hasTypeInterferingPlaceholder","_updateTextColorForDateType","monitor","event","isAutofilled","_currentNativeValue","disabled","_disabled","value","readonly","_readonly","setAttribute","removeAttribute","_value","actualColor","setStyle","_onFocus","_onBlur","ngDoCheck","hasValue","focused","autofilled","typesArray","includes","ngAcceptInputType_disabled","ngAcceptInputType_readonly","stopMonitoring","MdbInputDirective_Factory","NgControl","AutofillMonitor","MdbInputDirective_HostBindings","ɵɵlistener","MdbInputDirective_focus_HostBindingHandler","MdbInputDirective_blur_HostBindingHandler","ɵɵhostProperty","inputs","features","ɵɵProvidersFeature","provide","useExisting","providers","decorators","MdbFormsModule","MdbFormsModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports"],"sources":["F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/mdb-angular-ui-kit/fesm2022/mdb-angular-ui-kit-forms.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, ElementRef, Component, ChangeDetectionStrategy, ViewChild, ContentChild, HostBinding, Optional, Self, Input, HostListener, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/observers';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1$1 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport * as i2 from '@angular/cdk/text-field';\nimport { CommonModule } from '@angular/common';\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nclass MdbAbstractFormControl {\n    stateChanges;\n    input;\n    labelActive;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbAbstractFormControl, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbAbstractFormControl, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbAbstractFormControl, decorators: [{\n            type: Directive\n        }] });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbLabelDirective {\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbLabelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbLabelDirective, selector: \"[mdbLabel]\", exportAs: [\"mdbLabel\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbLabelDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbLabel]',\n                    exportAs: 'mdbLabel',\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass MdbFormControlComponent {\n    _renderer;\n    _contentObserver;\n    _elementRef;\n    _ngZone;\n    _notchLeading;\n    _notchMiddle;\n    _formControl;\n    _label;\n    outline = true;\n    display = true;\n    get input() {\n        return this._formControl.input;\n    }\n    constructor(_renderer, _contentObserver, _elementRef, _ngZone) {\n        this._renderer = _renderer;\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n    }\n    _destroy$ = new Subject();\n    _notchLeadingLength = 9;\n    _labelMarginLeft = 0;\n    _labelGapPadding = 8;\n    _labelScale = 0.8;\n    _recalculateGapWhenVisible = false;\n    ngAfterContentInit() {\n        if (this._label) {\n            setTimeout(() => {\n                this._updateBorderGap();\n            }, 0);\n        }\n        else {\n            this._renderer.addClass(this.input, 'placeholder-active');\n        }\n        this._updateLabelActiveState();\n        if (this._label) {\n            this._contentObserver\n                .observe(this._label.nativeElement)\n                .pipe(takeUntil(this._destroy$))\n                .subscribe(() => {\n                this._updateBorderGap();\n            });\n        }\n        this._formControl.stateChanges.pipe(takeUntil(this._destroy$)).subscribe(() => {\n            this._updateLabelActiveState();\n            if (this._label) {\n                this._updateBorderGap();\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            this._ngZone.onStable.pipe(takeUntil(this._destroy$)).subscribe(() => {\n                if (this._label && this._recalculateGapWhenVisible) {\n                    this._updateBorderGap();\n                }\n            });\n        });\n    }\n    ngOnDestroy() {\n        this._destroy$.next();\n        this._destroy$.unsubscribe();\n    }\n    _getLabelWidth() {\n        return this._label.nativeElement.clientWidth * this._labelScale + this._labelGapPadding;\n    }\n    _updateBorderGap() {\n        // Element is in DOM but is not visible, we need to recalculate the gap when element\n        // is displayed. This problem may occur in components such as tabs where content of\n        // inactive tabs has display:none styles\n        if (this._isHidden()) {\n            this._recalculateGapWhenVisible = true;\n            return;\n        }\n        const notchLeadingWidth = `${this._labelMarginLeft + this._notchLeadingLength}px`;\n        const notchMiddleWidth = `${this._getLabelWidth()}px`;\n        this._notchLeading.nativeElement.style.width = notchLeadingWidth;\n        this._notchMiddle.nativeElement.style.width = notchMiddleWidth;\n        this._label.nativeElement.style.marginLeft = `${this._labelMarginLeft}px`;\n        this._recalculateGapWhenVisible = false;\n    }\n    _updateLabelActiveState() {\n        if (this._isLabelActive()) {\n            this._renderer.addClass(this.input, 'active');\n        }\n        else {\n            this._renderer.removeClass(this.input, 'active');\n        }\n    }\n    _isLabelActive() {\n        return this._formControl && this._formControl.labelActive;\n    }\n    _isHidden() {\n        const el = this._elementRef.nativeElement;\n        return !el.offsetHeight && !el.offsetWidth;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbFormControlComponent, deps: [{ token: i0.Renderer2 }, { token: i1.ContentObserver }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbFormControlComponent, selector: \"mdb-form-control\", host: { properties: { \"class.form-outline\": \"this.outline\", \"class.d-block\": \"this.display\" } }, queries: [{ propertyName: \"_formControl\", first: true, predicate: MdbAbstractFormControl, descendants: true, static: true }, { propertyName: \"_label\", first: true, predicate: MdbLabelDirective, descendants: true, read: ElementRef, static: true }], viewQueries: [{ propertyName: \"_notchLeading\", first: true, predicate: [\"notchLeading\"], descendants: true, static: true }, { propertyName: \"_notchMiddle\", first: true, predicate: [\"notchMiddle\"], descendants: true, static: true }], ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"form-notch\\\">\\n  <div #notchLeading class=\\\"form-notch-leading\\\"></div>\\n  <div #notchMiddle class=\\\"form-notch-middle\\\"></div>\\n  <div class=\\\"form-notch-trailing\\\"></div>\\n</div>\\n\", changeDetection: i0.ChangeDetectionStrategy.OnPush });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbFormControlComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'mdb-form-control', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<ng-content></ng-content>\\n<div class=\\\"form-notch\\\">\\n  <div #notchLeading class=\\\"form-notch-leading\\\"></div>\\n  <div #notchMiddle class=\\\"form-notch-middle\\\"></div>\\n  <div class=\\\"form-notch-trailing\\\"></div>\\n</div>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.ContentObserver }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { _notchLeading: [{\n                type: ViewChild,\n                args: ['notchLeading', { static: true }]\n            }], _notchMiddle: [{\n                type: ViewChild,\n                args: ['notchMiddle', { static: true }]\n            }], _formControl: [{\n                type: ContentChild,\n                args: [MdbAbstractFormControl, { static: true }]\n            }], _label: [{\n                type: ContentChild,\n                args: [MdbLabelDirective, { static: true, read: ElementRef }]\n            }], outline: [{\n                type: HostBinding,\n                args: ['class.form-outline']\n            }], display: [{\n                type: HostBinding,\n                args: ['class.d-block']\n            }] } });\n\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nclass MdbInputDirective {\n    _elementRef;\n    _renderer;\n    _ngControl;\n    _autofill;\n    constructor(_elementRef, _renderer, _ngControl, _autofill) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._ngControl = _ngControl;\n        this._autofill = _autofill;\n    }\n    stateChanges = new Subject();\n    _focused = false;\n    _autofilled = false;\n    _color = '';\n    ngAfterViewInit() {\n        if (typeof getComputedStyle === 'function') {\n            this._color = getComputedStyle(this._elementRef.nativeElement).color;\n            if (this._hasTypeInterferingPlaceholder()) {\n                this._updateTextColorForDateType();\n            }\n        }\n        this._autofill.monitor(this.input).subscribe((event) => {\n            this._autofilled = event.isAutofilled;\n            this.stateChanges.next();\n        });\n    }\n    _currentNativeValue;\n    get disabled() {\n        if (this._ngControl && this._ngControl.disabled !== null) {\n            return this._ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    _disabled = false;\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        if (value) {\n            this._renderer.setAttribute(this._elementRef.nativeElement, 'readonly', '');\n        }\n        else {\n            this._renderer.removeAttribute(this._elementRef.nativeElement, 'readonly');\n        }\n        this._readonly = coerceBooleanProperty(value);\n    }\n    _readonly = false;\n    get value() {\n        return this._elementRef.nativeElement.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._elementRef.nativeElement.value = value;\n            this._value = value;\n            this.stateChanges.next();\n        }\n    }\n    _value;\n    _updateTextColorForDateType() {\n        const actualColor = getComputedStyle(this._elementRef.nativeElement).color;\n        this._color = actualColor !== 'rgba(0, 0, 0, 0)' ? actualColor : this._color;\n        const color = this.labelActive ? this._color : `transparent`;\n        this._renderer.setStyle(this._elementRef.nativeElement, 'color', color);\n    }\n    _onFocus() {\n        this._focused = true;\n        if (this._hasTypeInterferingPlaceholder()) {\n            this._updateTextColorForDateType();\n        }\n        this.stateChanges.next();\n    }\n    _onBlur() {\n        this._focused = false;\n        if (this._hasTypeInterferingPlaceholder()) {\n            this._updateTextColorForDateType();\n        }\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        const value = this._elementRef.nativeElement.value;\n        if (this._currentNativeValue !== value) {\n            this._currentNativeValue = value;\n            this.stateChanges.next();\n        }\n    }\n    get hasValue() {\n        return this._elementRef.nativeElement.value !== '';\n    }\n    get focused() {\n        return this._focused;\n    }\n    get autofilled() {\n        return this._autofilled;\n    }\n    get input() {\n        return this._elementRef.nativeElement;\n    }\n    get labelActive() {\n        return this.focused || this.hasValue || this.autofilled;\n    }\n    _hasTypeInterferingPlaceholder() {\n        const typesArray = ['date', 'datetime-local', 'time', 'month', 'week'];\n        return typesArray.includes(this._elementRef.nativeElement.type);\n    }\n    static ngAcceptInputType_disabled;\n    static ngAcceptInputType_readonly;\n    ngOnDestroy() {\n        this._autofill.stopMonitoring(this.input);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbInputDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1$1.NgControl, optional: true, self: true }, { token: i2.AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MdbInputDirective, selector: \"[mdbInput]\", inputs: { disabled: \"disabled\", readonly: \"readonly\", value: \"value\" }, host: { listeners: { \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"disabled\": \"this.disabled\" } }, providers: [{ provide: MdbAbstractFormControl, useExisting: MdbInputDirective }], exportAs: [\"mdbInput\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbInputDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: '[mdbInput]',\n                    exportAs: 'mdbInput',\n                    providers: [{ provide: MdbAbstractFormControl, useExisting: MdbInputDirective }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1$1.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.AutofillMonitor }]; }, propDecorators: { disabled: [{\n                type: HostBinding,\n                args: ['disabled']\n            }, {\n                type: Input,\n                args: ['disabled']\n            }], readonly: [{\n                type: Input,\n                args: ['readonly']\n            }], value: [{\n                type: Input\n            }], _onFocus: [{\n                type: HostListener,\n                args: ['focus']\n            }], _onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }] } });\n\nclass MdbFormsModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbFormsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbFormsModule, declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective], imports: [CommonModule, FormsModule], exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbFormsModule, imports: [CommonModule, FormsModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MdbFormsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n                    exports: [MdbFormControlComponent, MdbInputDirective, MdbLabelDirective],\n                    imports: [CommonModule, FormsModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbAbstractFormControl, MdbFormControlComponent, MdbFormsModule, MdbInputDirective, MdbLabelDirective };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}