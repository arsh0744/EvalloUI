{"ast":null,"code":"import _asyncToGenerator from \"F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\n// MDB Modules\nimport { MdbAccordionModule } from 'mdb-angular-ui-kit/accordion';\nimport { MdbCarouselModule } from 'mdb-angular-ui-kit/carousel';\nimport { MdbCheckboxModule } from 'mdb-angular-ui-kit/checkbox';\nimport { MdbCollapseModule } from 'mdb-angular-ui-kit/collapse';\nimport { MdbDropdownModule } from 'mdb-angular-ui-kit/dropdown';\nimport { MdbFormsModule } from 'mdb-angular-ui-kit/forms';\nimport { MdbModalModule } from 'mdb-angular-ui-kit/modal';\nimport { MdbPopoverModule } from 'mdb-angular-ui-kit/popover';\nimport { MdbRadioModule } from 'mdb-angular-ui-kit/radio';\nimport { MdbRangeModule } from 'mdb-angular-ui-kit/range';\nimport { MdbRippleModule } from 'mdb-angular-ui-kit/ripple';\nimport { MdbScrollspyModule } from 'mdb-angular-ui-kit/scrollspy';\nimport { MdbTabsModule } from 'mdb-angular-ui-kit/tabs';\nimport { MdbTooltipModule } from 'mdb-angular-ui-kit/tooltip';\nimport { MdbValidationModule } from 'mdb-angular-ui-kit/validation';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../services/server/server-api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../services/userMgmt/user.service\";\nimport * as i5 from \"mdb-angular-ui-kit/forms\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"mdb-angular-ui-kit/ripple\";\nimport * as i8 from \"mdb-angular-ui-kit/tabs\";\nimport * as i9 from \"mdb-angular-ui-kit/validation\";\nfunction MainPageComponent_button_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 28);\n    i0.ɵɵtext(1, \" Sign in \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r0.loginForm.valid);\n  }\n}\nfunction MainPageComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction MainPageComponent_div_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r2.registerError ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r2.regsisterationReponse);\n  }\n}\nfunction MainPageComponent_button_41_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 33);\n    i0.ɵɵtext(1, \" Sign Up \");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", !ctx_r3.ccRegisForm.valid);\n  }\n}\nfunction MainPageComponent_div_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 29)(1, \"div\", 30)(2, \"span\", 31);\n    i0.ɵɵtext(3, \"Loading...\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction MainPageComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32)(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r5.registerError ? \"text-danger\" : \"text-success\");\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r5.regsisterationReponse);\n  }\n}\nexport let MainPageComponent = /*#__PURE__*/(() => {\n  class MainPageComponent {\n    constructor(fb, server, router, Users) {\n      this.fb = fb;\n      this.server = server;\n      this.router = router;\n      this.Users = Users;\n      this.title = 'Welcome to Evallo';\n      this.showLoading = false;\n      this.showErrorMessage = false;\n      this.regsisterationReponse = null;\n      this.registerError = false;\n    }\n    ngOnInit() {\n      this.buildCCRegisForm();\n      this.buildLoginForm();\n    }\n    buildCCRegisForm() {\n      this.ccRegisForm = this.fb.group({\n        registerName: ['', [Validators.required]],\n        registerUsername: ['', [Validators.required]],\n        registerEmail: ['', [Validators.required, Validators.email]],\n        registerPassword: ['', [Validators.required]]\n      });\n    }\n    buildLoginForm() {\n      this.loginForm = this.fb.group({\n        loginCred: ['', [Validators.required]],\n        loginPass: ['', [Validators.required]]\n      });\n    }\n    addNewCCForEvallo() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.showLoading = true;\n        let newUser = {\n          Name: _this.ccRegisForm.controls.registerName.value,\n          username: _this.ccRegisForm.controls.registerUsername.value,\n          userEmail: _this.ccRegisForm.controls.registerEmail.value,\n          userPassword: _this.ccRegisForm.controls.registerPassword.value\n        };\n        try {\n          yield _this.server.addNewEvalloCCFunc(newUser).then(fulfilled => {\n            _this.showErrorMessage = true;\n            _this.regsisterationReponse = fulfilled.Message;\n            _this.showLoading = false;\n            _this.registerError = false;\n            setTimeout(() => {\n              _this.showErrorMessage = false;\n              _this.router.navigateByUrl('/content-list');\n            }, 3000);\n          }, rejected => {\n            _this.showErrorMessage = true;\n            _this.regsisterationReponse = rejected.Message;\n            _this.showLoading = false;\n            _this.registerError = true;\n            setTimeout(() => {\n              _this.showErrorMessage = false;\n            }, 3000);\n          });\n        } catch (err) {\n          _this.showLoading = false;\n          console.error(err);\n        }\n      })();\n    }\n    callLoginApi() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.showLoading = true;\n        let userCreds = {\n          identifier: _this2.loginForm.controls.loginCred.value,\n          password: _this2.loginForm.controls.loginPass.value\n        };\n        try {\n          yield _this2.server.callLoginApi(userCreds).then(fulfilled => {\n            _this2.regsisterationReponse = fulfilled.Message;\n            _this2.showLoading = false;\n            _this2.registerError = false;\n            _this2.router.navigateByUrl('/content-list');\n            _this2.Users.changeActiveUserId(fulfilled.Message.message._id);\n          }, rejected => {\n            console.log(rejected, \"rejected\");\n            _this2.showErrorMessage = true;\n            _this2.regsisterationReponse = rejected.Message;\n            _this2.showLoading = false;\n            _this2.registerError = true;\n            setTimeout(() => {\n              _this2.showErrorMessage = false;\n            }, 3000);\n          });\n        } catch (err) {\n          _this2.showLoading = false;\n          console.error(err);\n        }\n      })();\n    }\n    static #_ = this.ɵfac = function MainPageComponent_Factory(t) {\n      return new (t || MainPageComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ServerApiService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.UserService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: MainPageComponent,\n      selectors: [[\"app-main-page\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 44,\n      vars: 10,\n      consts: [[1, \"container\", \"pt-5\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", \"pt-5\"], [1, \"\"], [1, \"text-center\"], [\"src\", \"assets/logo.png\", 1, \"mb-4\", 2, \"width\", \"180px\"], [1, \"mb-3\", 2, \"text-align\", \"center\"], [1, \"pillSwitcher\"], [3, \"pills\", \"fill\"], [\"title\", \"Login\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-4\"], [\"mdbValidate\", \"\", \"mdbInput\", \"\", \"type\", \"email\", \"formControlName\", \"loginCred\", 1, \"form-control\"], [\"mdbValidate\", \"\", \"mdbLabel\", \"\", \"for\", \"loginName\", 1, \"form-label\"], [\"mdbInput\", \"\", \"type\", \"password\", \"formControlName\", \"loginPass\", 1, \"form-control\"], [\"mdbLabel\", \"\", \"for\", \"loginPassword\", 1, \"form-label\"], [\"mdbRipple\", \"\", \"type\", \"submit\", \"class\", \"btn btn-primary btn-block mb-4\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"row\", \"style\", \"display: flex; \\n                  justify-content: center;\", 4, \"ngIf\"], [\"class\", \"row\", \"style\", \"display: flex; \\n                  justify-content: center;text-align: center;\", 4, \"ngIf\"], [\"title\", \"Content Creator Registration\"], [\"mdbValidate\", \"\", \"mdbInput\", \"\", \"type\", \"text\", \"formControlName\", \"registerName\", 1, \"form-control\"], [\"mdbLabel\", \"\", \"for\", \"registerName\", 1, \"form-label\"], [\"mdbValidate\", \"\", \"mdbInput\", \"\", \"type\", \"text\", \"formControlName\", \"registerUsername\", 1, \"form-control\"], [\"mdbLabel\", \"\", \"for\", \"registerUsername\", 1, \"form-label\"], [\"mdbValidate\", \"\", \"mdbInput\", \"\", \"type\", \"email\", \"formControlName\", \"registerEmail\", 1, \"form-control\"], [\"mdbLabel\", \"\", \"for\", \"registerEmail\", 1, \"form-label\"], [\"mdbValidate\", \"\", \"mdbInput\", \"\", \"type\", \"password\", \"formControlName\", \"registerPassword\", 1, \"form-control\"], [\"mdbLabel\", \"\", \"for\", \"registerPassword\", 1, \"form-label\"], [\"mdbRipple\", \"\", \"type\", \"submit\", \"class\", \"btn btn-primary btn-block mb-3\", 3, \"disabled\", 4, \"ngIf\"], [\"mdbRipple\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mb-4\", 3, \"disabled\"], [1, \"row\", 2, \"display\", \"flex\", \"justify-content\", \"center\"], [\"role\", \"status\", 1, \"spinner-border\", \"text-primary\", 2, \"display\", \"flex\", \"justify-content\", \"center\"], [1, \"visually-hidden\"], [1, \"row\", 2, \"display\", \"flex\", \"justify-content\", \"center\", \"text-align\", \"center\"], [\"mdbRipple\", \"\", \"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", \"mb-3\", 3, \"disabled\"]],\n      template: function MainPageComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n          i0.ɵɵelement(4, \"img\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"h5\", 5);\n          i0.ɵɵtext(6, \"Welcome to Evallo\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(7, \"hr\");\n          i0.ɵɵelementStart(8, \"div\", 6)(9, \"mdb-tabs\", 7)(10, \"mdb-tab\", 8)(11, \"form\", 9);\n          i0.ɵɵlistener(\"ngSubmit\", function MainPageComponent_Template_form_ngSubmit_11_listener() {\n            return ctx.callLoginApi();\n          });\n          i0.ɵɵelementStart(12, \"mdb-form-control\", 10);\n          i0.ɵɵelement(13, \"input\", 11);\n          i0.ɵɵelementStart(14, \"label\", 12);\n          i0.ɵɵtext(15, \"Email or username\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(16, \"mdb-form-control\", 10);\n          i0.ɵɵelement(17, \"input\", 13);\n          i0.ɵɵelementStart(18, \"label\", 14);\n          i0.ɵɵtext(19, \"Password\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(20, MainPageComponent_button_20_Template, 2, 1, \"button\", 15)(21, MainPageComponent_div_21_Template, 4, 0, \"div\", 16)(22, MainPageComponent_div_22_Template, 3, 4, \"div\", 17);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(23, \"mdb-tab\", 18)(24, \"form\", 9);\n          i0.ɵɵlistener(\"ngSubmit\", function MainPageComponent_Template_form_ngSubmit_24_listener() {\n            return ctx.addNewCCForEvallo();\n          });\n          i0.ɵɵelementStart(25, \"mdb-form-control\", 10);\n          i0.ɵɵelement(26, \"input\", 19);\n          i0.ɵɵelementStart(27, \"label\", 20);\n          i0.ɵɵtext(28, \"Name\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"mdb-form-control\", 10);\n          i0.ɵɵelement(30, \"input\", 21);\n          i0.ɵɵelementStart(31, \"label\", 22);\n          i0.ɵɵtext(32, \"Username\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(33, \"mdb-form-control\", 10);\n          i0.ɵɵelement(34, \"input\", 23);\n          i0.ɵɵelementStart(35, \"label\", 24);\n          i0.ɵɵtext(36, \"Email\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(37, \"mdb-form-control\", 10);\n          i0.ɵɵelement(38, \"input\", 25);\n          i0.ɵɵelementStart(39, \"label\", 26);\n          i0.ɵɵtext(40, \"Password\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(41, MainPageComponent_button_41_Template, 2, 1, \"button\", 27)(42, MainPageComponent_div_42_Template, 4, 0, \"div\", 16)(43, MainPageComponent_div_43_Template, 3, 4, \"div\", 17);\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"pills\", true)(\"fill\", true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"ngIf\", ctx.showLoading == false);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showLoading == true);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showErrorMessage == true);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.ccRegisForm);\n          i0.ɵɵadvance(17);\n          i0.ɵɵproperty(\"ngIf\", ctx.showLoading == false);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showLoading == true);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.showErrorMessage == true);\n        }\n      },\n      dependencies: [MdbFormsModule, i5.MdbFormControlComponent, i5.MdbInputDirective, i5.MdbLabelDirective, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, CommonModule, i6.NgIf, MdbAccordionModule, MdbCarouselModule, MdbCheckboxModule, MdbCollapseModule, MdbDropdownModule, MdbModalModule, MdbPopoverModule, MdbRadioModule, MdbRangeModule, MdbRippleModule, i7.MdbRippleDirective, MdbScrollspyModule, MdbTabsModule, i8.MdbTabComponent, i8.MdbTabsComponent, MdbTooltipModule, MdbValidationModule, i9.MdbValidateDirective]\n    });\n  }\n  return MainPageComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}