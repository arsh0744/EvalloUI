{"ast":null,"code":"import _asyncToGenerator from \"F:/Evallo Project/mdb-proj/mdb5-free-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerApiService {\n  constructor(http) {\n    this.http = http;\n    this.BaseUrl = \"http://localhost:3000/\";\n    this.url_Create_New_CC = this.BaseUrl + 'api/addNewCC';\n    this.url_CallLogin = this.BaseUrl + 'api/checkLogin';\n    this.url_Create_New_Content = this.BaseUrl + 'api/addUserContent';\n  }\n  addNewEvalloCCFunc(NewUser) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this.http.post(_this.url_Create_New_CC, NewUser).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                resolve({\n                  Error: null,\n                  Message: \"Registered Successfully,Redirecting\"\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"User Not Registered\"\n                });\n              },\n              complete: () => {\n                // console.error(\"complete\") ;\n              }\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  callLoginApi(UserCred) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this2.http.post(_this2.url_CallLogin, UserCred).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                resolve({\n                  Error: null,\n                  Message: value\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"User Not Found\"\n                });\n              },\n              complete: () => {\n                //console.error(\"complete\") ;\n              }\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x3, _x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  addUserContentFunction(Content) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return yield new Promise( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n          try {\n            _this3.http.post(_this3.url_Create_New_CC, Content).subscribe({\n              next: value => {\n                console.log(\"next\", value);\n                resolve({\n                  Error: null,\n                  Message: \"Registered Successfully\"\n                });\n              },\n              error: error => {\n                console.error(\"error\", error);\n                reject({\n                  Error: true,\n                  Message: \"User Not Registered\"\n                });\n              },\n              complete: () => {\n                // console.error(\"complete\") ;\n              }\n            });\n          } catch (err) {\n            console.error(err);\n            reject({\n              Error: true,\n              Message: \"User Not Registered\"\n            });\n          }\n        });\n        return function (_x5, _x6) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  static #_ = this.ɵfac = function ServerApiService_Factory(t) {\n    return new (t || ServerApiService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServerApiService,\n    factory: ServerApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ServerApiService","constructor","http","BaseUrl","url_Create_New_CC","url_CallLogin","url_Create_New_Content","addNewEvalloCCFunc","NewUser","_this","_asyncToGenerator","Promise","_ref","resolve","reject","post","subscribe","next","value","console","log","Error","Message","error","complete","err","_x","_x2","apply","arguments","callLoginApi","UserCred","_this2","_ref2","_x3","_x4","addUserContentFunction","Content","_this3","_ref3","_x5","_x6","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["F:\\Evallo Project\\mdb-proj\\mdb5-free-angular\\src\\app\\services\\server\\server-api.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { UserContentModel, UserRegistrationModel } from '../interfaces/interface.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n\r\nexport class ServerApiService {\r\n\r\n  constructor(\r\n    private http : HttpClient\r\n  ) { }\r\n  private  BaseUrl =  \"http://localhost:3000/\" ;\r\n\r\n  url_Create_New_CC = this.BaseUrl + \r\n                      'api/addNewCC' ;\r\n\r\n  async addNewEvalloCCFunc(NewUser :UserRegistrationModel )\r\n  {\r\n\r\n    return await new Promise(\r\n\r\n     async (resolve,reject) =>\r\n      {\r\n        try\r\n        {\r\n          this.http.post(this.url_Create_New_CC,NewUser).subscribe(\r\n            {\r\n              next: (value) => {\r\n                console.log(\"next\",value) ;\r\n                resolve({Error:null,Message: \"Registered Successfully,Redirecting\"}) ;\r\n              },\r\n              error: (error) => {\r\n                console.error(\"error\",error) ;\r\n                reject({Error:true,Message: \"User Not Registered\"}) ;\r\n              },\r\n              complete: () => {\r\n               // console.error(\"complete\") ;\r\n              }\r\n            }\r\n            \r\n          )\r\n        }\r\n        catch(err)\r\n        {\r\n          console.error(err);\r\n          reject({Error:true,Message: \"User Not Registered\"});\r\n        }\r\n      }\r\n    )\r\n\r\n   \r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\n  url_CallLogin = this.BaseUrl + \r\n                      'api/checkLogin' ;\r\n\r\n  async callLoginApi(UserCred)\r\n  {\r\n\r\n    return await new Promise(\r\n\r\n     async (resolve,reject) =>\r\n      {\r\n        try\r\n        {\r\n          this.http.post(this.url_CallLogin,UserCred).subscribe(\r\n            {\r\n              next: (value) => {\r\n                console.log(\"next\",value) ;\r\n                resolve({Error:null,Message: value}) ;\r\n              },\r\n              error: (error) => {\r\n                console.error(\"error\",error) ;\r\n                reject({Error:true,Message: \"User Not Found\"}) ;\r\n              },\r\n              complete: () => {\r\n                //console.error(\"complete\") ;\r\n              }\r\n            }\r\n            \r\n          )\r\n        }\r\n        catch(err)\r\n        {\r\n          console.error(err);\r\n          reject({Error:true,Message: \"User Not Registered\"});\r\n        }\r\n      }\r\n    )\r\n\r\n   \r\n\r\n\r\n    \r\n  }\r\n\r\n\r\n\r\nurl_Create_New_Content = this.BaseUrl + \r\n  'api/addUserContent' ;\r\n\r\nasync addUserContentFunction(Content :UserContentModel )\r\n{\r\n\r\nreturn await new Promise(\r\n\r\nasync (resolve,reject) =>\r\n{\r\ntry\r\n{\r\nthis.http.post(this.url_Create_New_CC,Content).subscribe(\r\n{\r\nnext: (value) => {\r\nconsole.log(\"next\",value) ;\r\nresolve({Error:null,Message: \"Registered Successfully\"}) ;\r\n},\r\nerror: (error) => {\r\nconsole.error(\"error\",error) ;\r\nreject({Error:true,Message: \"User Not Registered\"}) ;\r\n},\r\ncomplete: () => {\r\n// console.error(\"complete\") ;\r\n}\r\n}\r\n\r\n)\r\n}\r\ncatch(err)\r\n{\r\nconsole.error(err);\r\nreject({Error:true,Message: \"User Not Registered\"});\r\n}\r\n}\r\n)\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n  \r\n\r\n\r\n\r\n\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}