{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i2 from '@angular/cdk/portal';\nimport { TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, TemplateRef, Component, ContentChild, ViewChild, Input, Inject, EventEmitter, ContentChildren, HostBinding, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nfunction MdbTabComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nconst _c0 = [\"*\"];\nfunction MdbTabsComponent_li_1_ng_template_2_ng_template_0_Template(rf, ctx) {}\nfunction MdbTabsComponent_li_1_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MdbTabsComponent_li_1_ng_template_2_ng_template_0_Template, 0, 0, \"ng-template\", 6);\n  }\n  if (rf & 2) {\n    const tab_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"cdkPortalOutlet\", tab_r2.titleContent);\n  }\n}\nfunction MdbTabsComponent_li_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const tab_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵtextInterpolate(tab_r2.title);\n  }\n}\nfunction MdbTabsComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 3);\n    i0.ɵɵlistener(\"click\", function MdbTabsComponent_li_1_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const i_r3 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.setActiveTab(i_r3));\n    });\n    i0.ɵɵelementStart(1, \"a\", 4);\n    i0.ɵɵtemplate(2, MdbTabsComponent_li_1_ng_template_2_Template, 1, 1, \"ng-template\", 5)(3, MdbTabsComponent_li_1_ng_template_3_Template, 1, 1, \"ng-template\", 5);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const tab_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"active\", tab_r2.active)(\"disabled\", tab_r2.disabled);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", tab_r2.titleContent);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !tab_r2.titleContent);\n  }\n}\nfunction MdbTabsComponent_ng_container_3_ng_template_2_Template(rf, ctx) {}\nconst _c1 = (a0, a1, a2) => ({\n  fade: a0,\n  active: a1,\n  show: a2\n});\nfunction MdbTabsComponent_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 7);\n    i0.ɵɵtemplate(2, MdbTabsComponent_ng_container_3_ng_template_2_Template, 0, 0, \"ng-template\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const tab_r11 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(2, _c1, tab_r11.fade, tab_r11.active, tab_r11.show));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"tab\", tab_r11);\n  }\n}\nconst _c2 = (a0, a1, a2, a3, a4, a5) => ({\n  \"nav-pills\": a0,\n  \"nav-tabs\": a1,\n  \"nav-fill\": a2,\n  \"nav-justified\": a3,\n  \"flex-column\": a4,\n  \"text-center\": a5\n});\nconst MDB_TAB_CONTENT = new InjectionToken('MdbTabContentDirective');\nlet MdbTabContentDirective = /*#__PURE__*/(() => {\n  class MdbTabContentDirective {\n    template;\n    constructor(template) {\n      this.template = template;\n    }\n    static ɵfac = function MdbTabContentDirective_Factory(t) {\n      return new (t || MdbTabContentDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MdbTabContentDirective,\n      selectors: [[\"\", \"mdbTabContent\", \"\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MDB_TAB_CONTENT,\n        useExisting: MdbTabContentDirective\n      }])]\n    });\n  }\n  return MdbTabContentDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst MDB_TAB_TITLE = new InjectionToken('MdbTabTitleDirective');\nlet MdbTabTitleDirective = /*#__PURE__*/(() => {\n  class MdbTabTitleDirective {\n    template;\n    constructor(template) {\n      this.template = template;\n    }\n    static ɵfac = function MdbTabTitleDirective_Factory(t) {\n      return new (t || MdbTabTitleDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MdbTabTitleDirective,\n      selectors: [[\"\", \"mdbTabTitle\", \"\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MDB_TAB_TITLE,\n        useExisting: MdbTabTitleDirective\n      }])]\n    });\n  }\n  return MdbTabTitleDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst SHOW_TRANSITION_DELAY = 150; // Time of transition taken from styles\nconst TRANSITION_PADDING = 5; // Value from standard added via executeAfterTransition function\nlet MdbTabComponent = /*#__PURE__*/(() => {\n  class MdbTabComponent {\n    _vcr;\n    _lazyContent;\n    _titleContent;\n    _content;\n    activeStateChange$ = new Subject();\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    _disabled = false;\n    get fade() {\n      return this._fade;\n    }\n    set fade(value) {\n      this._fade = coerceBooleanProperty(value);\n    }\n    _fade = true;\n    title;\n    get content() {\n      return this._contentPortal;\n    }\n    get titleContent() {\n      return this._titlePortal;\n    }\n    get shouldAttach() {\n      return this._lazyContent === undefined;\n    }\n    _contentPortal = null;\n    _titlePortal = null;\n    get active() {\n      return this._active;\n    }\n    set active(value) {\n      this._active = coerceBooleanProperty(value);\n      this.activeStateChange$.next(value);\n    }\n    _active = false;\n    get show() {\n      return this._show;\n    }\n    set show(value) {\n      // We use setTimeout to apply delay for setting show class to reproduce standard library where\n      // show class is applied after a delay to newly activated item via usage of _queueCallback and\n      // executeAfterTransition functions which introduce delay equal to transition time taken from\n      // element styles\n      setTimeout(() => {\n        this._show = coerceBooleanProperty(value);\n      }, SHOW_TRANSITION_DELAY + TRANSITION_PADDING);\n    }\n    _show = true;\n    constructor(_vcr) {\n      this._vcr = _vcr;\n    }\n    ngOnInit() {\n      this._createContentPortal();\n      if (this._titleContent) {\n        this._createTitlePortal();\n      }\n    }\n    _createContentPortal() {\n      const content = this._lazyContent || this._content;\n      this._contentPortal = new TemplatePortal(content, this._vcr);\n    }\n    _createTitlePortal() {\n      this._titlePortal = new TemplatePortal(this._titleContent, this._vcr);\n    }\n    static ngAcceptInputType_disabled;\n    static ɵfac = function MdbTabComponent_Factory(t) {\n      return new (t || MdbTabComponent)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MdbTabComponent,\n      selectors: [[\"mdb-tab\"]],\n      contentQueries: function MdbTabComponent_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MDB_TAB_CONTENT, 7, TemplateRef);\n          i0.ɵɵcontentQuery(dirIndex, MDB_TAB_TITLE, 7, TemplateRef);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._titleContent = _t.first);\n        }\n      },\n      viewQuery: function MdbTabComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TemplateRef, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._content = _t.first);\n        }\n      },\n      inputs: {\n        disabled: \"disabled\",\n        fade: \"fade\",\n        title: \"title\"\n      },\n      ngContentSelectors: _c0,\n      decls: 1,\n      vars: 0,\n      template: function MdbTabComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, MdbTabComponent_ng_template_0_Template, 1, 0, \"ng-template\");\n        }\n      },\n      encapsulation: 2\n    });\n  }\n  return MdbTabComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nlet MdbTabPortalOutlet = /*#__PURE__*/(() => {\n  class MdbTabPortalOutlet extends CdkPortalOutlet {\n    _destroy$ = new Subject();\n    tab;\n    constructor(_cfr, _vcr, _document) {\n      super(_cfr, _vcr, _document);\n    }\n    ngOnInit() {\n      super.ngOnInit();\n      if ((this.tab.shouldAttach || this.tab.active) && !this.hasAttached()) {\n        this.attach(this.tab.content);\n      } else {\n        this.tab.activeStateChange$.pipe(takeUntil(this._destroy$)).subscribe(isActive => {\n          if (isActive && !this.hasAttached()) {\n            this.attach(this.tab.content);\n          }\n        });\n      }\n    }\n    ngOnDestroy() {\n      this._destroy$.next();\n      this._destroy$.complete();\n      super.ngOnDestroy();\n    }\n    static ɵfac = function MdbTabPortalOutlet_Factory(t) {\n      return new (t || MdbTabPortalOutlet)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MdbTabPortalOutlet,\n      selectors: [[\"\", \"mdbTabPortalOutlet\", \"\"]],\n      inputs: {\n        tab: \"tab\"\n      },\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MdbTabPortalOutlet;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass MdbTabChange {\n  index;\n  tab;\n}\nlet MdbTabsComponent = /*#__PURE__*/(() => {\n  class MdbTabsComponent {\n    tabs;\n    _destroy$ = new Subject();\n    get fill() {\n      return this._fill;\n    }\n    set fill(value) {\n      this._fill = coerceBooleanProperty(value);\n    }\n    _fill = false;\n    get justified() {\n      return this._justified;\n    }\n    set justified(value) {\n      this._justified = coerceBooleanProperty(value);\n    }\n    _justified = false;\n    get pills() {\n      return this._pills;\n    }\n    set pills(value) {\n      this._pills = coerceBooleanProperty(value);\n    }\n    _pills = false;\n    get vertical() {\n      return this._vertical;\n    }\n    set vertical(value) {\n      this._vertical = coerceBooleanProperty(value);\n    }\n    _vertical = false;\n    navColumnClass = 'col-3';\n    contentColumnClass = 'col-9';\n    get navColClass() {\n      return this.vertical ? this.navColumnClass : '';\n    }\n    get contentColClass() {\n      return this.vertical ? this.contentColumnClass : '';\n    }\n    _selectedIndex;\n    activeTabChange = new EventEmitter();\n    constructor() {}\n    ngAfterContentInit() {\n      const firstActiveTabIndex = this.tabs.toArray().findIndex(tab => !tab.disabled);\n      this.setActiveTab(firstActiveTabIndex);\n      this.tabs.changes.pipe(takeUntil(this._destroy$)).subscribe(() => {\n        const hasActiveTab = this.tabs.find(tab => tab.active);\n        if (!hasActiveTab) {\n          const closestTabIndex = this._getClosestTabIndex(this._selectedIndex);\n          if (closestTabIndex !== -1) {\n            this.setActiveTab(closestTabIndex);\n          }\n        }\n      });\n    }\n    setActiveTab(index) {\n      const activeTab = this.tabs.toArray()[index];\n      if (!activeTab || activeTab && activeTab.disabled) {\n        return;\n      }\n      this.tabs.forEach(tab => tab.active = tab === activeTab);\n      this.tabs.forEach(tab => tab.show = tab === activeTab);\n      this._selectedIndex = index;\n      const tabChangeEvent = this._getTabChangeEvent(index, activeTab);\n      this.activeTabChange.emit(tabChangeEvent);\n    }\n    _getTabChangeEvent(index, tab) {\n      const event = new MdbTabChange();\n      event.index = index;\n      event.tab = tab;\n      return event;\n    }\n    _getClosestTabIndex(index) {\n      const tabs = this.tabs.toArray();\n      const tabsLength = tabs.length;\n      if (!tabsLength) {\n        return -1;\n      }\n      for (let i = 1; i <= tabsLength; i += 1) {\n        const prevIndex = index - i;\n        const nextIndex = index + i;\n        if (tabs[prevIndex] && !tabs[prevIndex].disabled) {\n          return prevIndex;\n        }\n        if (tabs[nextIndex] && !tabs[nextIndex].disabled) {\n          return nextIndex;\n        }\n      }\n      return -1;\n    }\n    ngOnDestroy() {\n      this._destroy$.next();\n      this._destroy$.complete();\n    }\n    static ngAcceptInputType_fill;\n    static ngAcceptInputType_justified;\n    static ngAcceptInputType_pills;\n    static ngAcceptInputType_vertical;\n    static ɵfac = function MdbTabsComponent_Factory(t) {\n      return new (t || MdbTabsComponent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MdbTabsComponent,\n      selectors: [[\"mdb-tabs\"]],\n      contentQueries: function MdbTabsComponent_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MdbTabComponent, 4);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabs = _t);\n        }\n      },\n      hostVars: 2,\n      hostBindings: function MdbTabsComponent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"row\", ctx.vertical);\n        }\n      },\n      inputs: {\n        fill: \"fill\",\n        justified: \"justified\",\n        pills: \"pills\",\n        vertical: \"vertical\",\n        navColumnClass: \"navColumnClass\",\n        contentColumnClass: \"contentColumnClass\"\n      },\n      outputs: {\n        activeTabChange: \"activeTabChange\"\n      },\n      decls: 4,\n      vars: 16,\n      consts: [[\"role\", \"tablist\", 3, \"ngClass\"], [\"class\", \"nav-item\", \"role\", \"presentation\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [\"role\", \"presentation\", 1, \"nav-item\", 3, \"click\"], [\"href\", \"javascript:void(0)\", \"role\", \"tab\", 1, \"nav-link\"], [3, \"ngIf\"], [3, \"cdkPortalOutlet\"], [1, \"tab-pane\", 3, \"ngClass\"], [\"mdbTabPortalOutlet\", \"\", 3, \"tab\"]],\n      template: function MdbTabsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ul\", 0);\n          i0.ɵɵtemplate(1, MdbTabsComponent_li_1_Template, 4, 6, \"li\", 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"div\");\n          i0.ɵɵtemplate(3, MdbTabsComponent_ng_container_3_Template, 3, 6, \"ng-container\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMapInterpolate1(\"nav mb-3 flex-column \", ctx.navColClass, \"\");\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction6(9, _c2, ctx.pills, !ctx.pills, ctx.fill, ctx.justified, ctx.vertical, ctx.vertical));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.tabs);\n          i0.ɵɵadvance();\n          i0.ɵɵclassMapInterpolate1(\"tab-content \", ctx.contentColClass, \"\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.tabs);\n        }\n      },\n      dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.CdkPortalOutlet, MdbTabPortalOutlet],\n      encapsulation: 2\n    });\n  }\n  return MdbTabsComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MdbTabsModule = /*#__PURE__*/(() => {\n  class MdbTabsModule {\n    static ɵfac = function MdbTabsModule_Factory(t) {\n      return new (t || MdbTabsModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MdbTabsModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, PortalModule]\n    });\n  }\n  return MdbTabsModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MdbTabChange, MdbTabComponent, MdbTabContentDirective, MdbTabPortalOutlet, MdbTabTitleDirective, MdbTabsComponent, MdbTabsModule };\n//# sourceMappingURL=mdb-angular-ui-kit-tabs.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}